<?php

// --- BLOCO AJAX: Executado PRIMEIRO se a action for 'check_arena_status' ---
if (isset($_GET['action']) && $_GET['action'] === 'check_arena_status') {
    session_start(); // Mínimo para checar login
    if (!isset($_SESSION['user_id'])) {
        http_response_code(403); echo json_encode(['success' => false, 'status' => 'ERROR', 'error' => 'Acesso não autorizado.']); exit();
    }
    require_once(__DIR__ . '/conexao.php'); // Conexão SÓ para AJAX <<<<< VERIFIQUE PATH

    $response = ['success' => false, 'status' => 'UNKNOWN', 'event_id' => null];
    $eventId = filter_input(INPUT_GET, 'event_id', FILTER_VALIDATE_INT);

    if (!$eventId) {
        http_response_code(400); $response['error'] = 'ID do evento inválido.'; echo json_encode($response); if (isset($conn)) $conn = null; exit();
    }
    $response['event_id'] = $eventId;

    try {
        if (!isset($conn) || !($conn instanceof PDO)) { throw new Exception("DB indisponível para AJAX check."); }
        $stmt = $conn->prepare("SELECT status FROM arena_eventos WHERE id = ? LIMIT 1");
        $stmt->execute([$eventId]);
        $eventStatus = $stmt->fetchColumn();
        if ($eventStatus === false) { $response['status'] = 'NOT_FOUND'; $response['error'] = 'Evento não encontrado.'; }
        else { $response['success'] = true; $response['status'] = $eventStatus; }
    } catch (Exception $e) {
        error_log("Exception AJAX check praca.php ev $eventId: " . $e->getMessage());
        http_response_code(500); $response['error'] = 'Erro interno servidor (check).'; $response['status'] = 'ERROR_INTERNAL';
    }

    if (isset($conn)) $conn = null; // Fecha conexão AJAX
    header('Content-Type: application/json'); echo json_encode($response); exit();
}
// --- FIM DO BLOCO AJAX ---


// --- Execução Normal da Página ---
ini_set('display_errors', 1);
error_reporting(E_ALL);
session_start(); // Sessão para página normal
if (!isset($_SESSION['user_id'])) { header("Location: login.php"); exit(); } // <<<<< VERIFIQUE PATH


// --- Includes Essenciais ---
require_once('conexao.php'); // Conexão principal <<<<< VERIFIQUE PATH
// Inclui sala_functions e fallbacks
$sala_functions_path = __DIR__ . '/script/sala_functions.php'; // <<<<< VERIFIQUE PATH
if (!file_exists($sala_functions_path)) { $sala_functions_path = __DIR__ . '/../script/sala_functions.php'; } // Tenta um nível acima
if (file_exists($sala_functions_path)) { require_once($sala_functions_path); }
else {
    error_log("FATAL: script/sala_functions.php não encontrado (praca.php).");
    // Define fallbacks essenciais se o include falhar
    if (!function_exists('formatarNomeUsuarioComTag')) { function formatarNomeUsuarioComTag(PDO $conn, $userInfoInput): string { if (is_array($userInfoInput) && isset($userInfoInput['nome'])) { return htmlspecialchars($userInfoInput['nome']); } return 'Desconhecido'; } }
    if (!function_exists('verificarLevelUpHome')) { function verificarLevelUpHome(PDO $conn, int $userId): array { return []; } }
}
// Fallback formatNumber
if (!function_exists('formatNumber')) { function formatNumber($num) { $n = filter_var($num, FILTER_VALIDATE_INT); return number_format(($n === false ? 0 : $n), 0, ',', '.'); } }

// --- Variáveis e Configurações ---
$id = $_SESSION['user_id'];
$usuario = null;
$outros_na_praca = [];
$chat_history = [];
$pending_challenges = [];
$mensagem_final_feedback = "";
$currentPage = basename($_SERVER['PHP_SELF']); // praca.php
$nome_formatado_usuario = 'ErroNome';
$rank_nivel = 'N/A';
$rank_sala = 'N/A';
// ===>>> NOVA Variável para Notificações do Popup <<<===
$unread_notifications_for_popup = [];
// Constantes e Configs
if (!defined('XP_BASE_LEVEL_UP')) define('XP_BASE_LEVEL_UP', 1000);
if (!defined('XP_EXPOENTE_LEVEL_UP')) define('XP_EXPOENTE_LEVEL_UP', 1.5);
$intervalo_atividade_minutos = 5;
$intervalo_limpeza_minutos = $intervalo_atividade_minutos * 2;
$chat_history_limit = 50;
$challenge_duration_seconds = 60;
// Arena
$current_event_status = null; $current_event_id = null; $is_registered_current_event = false; $is_participating_active_arena = false; $active_event_id = null; $current_reg_count = 0; $required_players = 6; $arena_do_usuario_para_exibir = []; $open_event_for_display = null;


// --- ===>>> INÍCIO: Processar Ações de Notificação via GET (Adaptado para Praca) <<<=== ---
// Só executa se NÃO for a action AJAX 'check_arena_status'
if ($_SERVER['REQUEST_METHOD'] === 'GET' && !isset($_GET['action'])) {
     // Garante conexão (pode já existir do topo)
     if (!isset($conn) || !$conn instanceof PDO) {
        try { require('conexao.php'); if (!isset($conn) || !$conn instanceof PDO) { throw new Exception("DB indisponível para GET actions (Praca)."); } }
        catch (Exception $e) { die("Erro crítico DB (Praca GET Actions)."); }
     }
     $notification_action_processed = false;

     // Marcar como lida
     if (isset($_GET['mark_read']) && filter_var($_GET['mark_read'], FILTER_VALIDATE_INT)) {
         $notif_id_to_mark = (int)$_GET['mark_read'];
         try { $conn->prepare("UPDATE user_notifications SET is_read = 1 WHERE id = :nid AND user_id = :uid")->execute([':nid' => $notif_id_to_mark, ':uid' => $id]); }
         catch (PDOException $e) { $_SESSION['feedback_geral'] = "<span class='error-message'>Erro marcar notificação.</span>"; error_log("Erro PDO marcar notif {$notif_id_to_mark} lida user {$id} (Praca): " . $e->getMessage()); }
         $notification_action_processed = true;
     }
     // Convite de GRUPO
     elseif (isset($_GET['invite_action']) && isset($_GET['notif_id']) && filter_var($_GET['notif_id'], FILTER_VALIDATE_INT)) {
         $invite_action = $_GET['invite_action']; $notif_id_invite = (int)$_GET['notif_id'];
         if ($invite_action === 'accept' || $invite_action === 'reject') {
              try {
                  // (Lógica de aceitar/recusar grupo - Idêntica à de Urunai/Templo)
                    $stmt_get_invite = $conn->prepare("SELECT related_data FROM user_notifications WHERE id = :notif_id AND user_id = :user_id AND type = 'invite'");
                    $stmt_get_invite->execute([':notif_id' => $notif_id_invite, ':user_id' => $id]);
                    $invite_data_row = $stmt_get_invite->fetch(PDO::FETCH_ASSOC);
                    if ($invite_data_row) {
                        $related_data = json_decode($invite_data_row['related_data'] ?? '{}', true);
                        $group_id = $related_data['group_id'] ?? null;
                        if ($invite_action === 'accept' && $group_id) {
                            $sql_check_current_group = "SELECT grupo_id FROM grupo_membros WHERE user_id = :user_id LIMIT 1";
                            $stmt_check_current = $conn->prepare($sql_check_current_group);
                            $stmt_check_current->execute([':user_id' => $id]);
                            if ($stmt_check_current->fetchColumn()) {
                                $_SESSION['feedback_geral'] = "<span class='error-message'>Você já pertence a um grupo.</span>";
                            } else {
                                $sql_add_member = "INSERT INTO grupo_membros (grupo_id, user_id, cargo) VALUES (:grupo_id, :user_id, 'membro')";
                                if ($conn->prepare($sql_add_member)->execute([':grupo_id' => $group_id, ':user_id' => $id])) {
                                    $_SESSION['feedback_geral'] = "<span class='success-message'>Bem-vindo à equipe!</span>";
                                    $conn->prepare("UPDATE grupo_convites SET status = 'aceito' WHERE convidado_user_id = :uid AND grupo_id = :gid AND status = 'pendente'")->execute([':uid' => $id, ':gid' => $group_id]);
                                    $conn->prepare("UPDATE grupo_convites SET status = 'recusado' WHERE convidado_user_id = :uid AND status = 'pendente' AND grupo_id != :gid")->execute([':uid' => $id, ':gid' => $group_id]);
                                } else { $_SESSION['feedback_geral'] = "<span class='error-message'>Erro ao entrar no grupo.</span>"; }
                            }
                        } else { // 'reject'
                            $_SESSION['feedback_geral'] = "<span class='info-message'>Convite de grupo recusado.</span>";
                            if ($group_id) { $conn->prepare("UPDATE grupo_convites SET status = 'recusado' WHERE convidado_user_id = :uid AND grupo_id = :gid AND status = 'pendente'")->execute([':uid' => $id, ':gid' => $group_id]); }
                        }
                        $conn->prepare("UPDATE user_notifications SET is_read = 1 WHERE id = :nid AND user_id = :uid")->execute([':nid' => $notif_id_invite, ':uid' => $id]);
                    } else { $_SESSION['feedback_geral'] = "<span class='warning-message'>Convite de grupo inválido.</span>"; }
              } catch (Exception $e) {
                  $_SESSION['feedback_geral'] = "<span class='error-message'>Erro processar convite grupo.</span>"; error_log("Erro invite_action (Praca): " . $e->getMessage());
                  try { $conn->prepare("UPDATE user_notifications SET is_read = 1 WHERE id = :id AND user_id = :uid")->execute([':id'=>$notif_id_invite, ':uid'=>$id]); } catch(PDOException $em){}
              } $notification_action_processed = true;
         }
     }
     // Convite de FUSÃO
     elseif (isset($_GET['fusion_action']) && isset($_GET['notif_id']) && filter_var($_GET['notif_id'], FILTER_VALIDATE_INT)) {
         $fusion_action = $_GET['fusion_action']; $notif_id_fusion = (int)$_GET['notif_id'];
         if ($fusion_action === 'accept' || $fusion_action === 'reject') {
              try {
                  // (Lógica de aceitar/recusar fusão - Idêntica à de Urunai/Templo)
                    $stmt_get_fusion = $conn->prepare("SELECT related_data FROM user_notifications WHERE id = :notif_id AND user_id = :user_id AND type = 'fusion_invite'");
                    $stmt_get_fusion->execute([':notif_id' => $notif_id_fusion, ':user_id' => $id]);
                    $fusion_data_row = $stmt_get_fusion->fetch(PDO::FETCH_ASSOC);
                    if ($fusion_data_row) {
                        $related_data = json_decode($fusion_data_row['related_data'] ?? '{}', true);
                        $inviter_id = $related_data['inviter_id'] ?? null;
                        $desafio_id = $related_data['desafio_id'] ?? null;
                        if ($inviter_id && $desafio_id) {
                            if ($fusion_action === 'accept') {
                                $sql = "UPDATE convites_fusao SET status = 'aceito', data_atualizacao = NOW() WHERE convidante_id = :inviter_id AND convidado_id = :user_id AND desafio_id = :desafio_id AND status = 'pendente'";
                                $stmt = $conn->prepare($sql);
                                if ($stmt->execute([':inviter_id' => $inviter_id, ':user_id' => $id, ':desafio_id' => $desafio_id]) && $stmt->rowCount() > 0) { $_SESSION['feedback_geral'] = "<span class='success-message'>Fusão aceita!</span>"; }
                                else { $_SESSION['feedback_geral'] = "<span class='warning-message'>Convite fusão não encontrado/respondido.</span>"; }
                            } else { // reject
                                $sql = "UPDATE convites_fusao SET status = 'recusado', data_atualizacao = NOW() WHERE convidante_id = :inviter_id AND convidado_id = :user_id AND desafio_id = :desafio_id AND status = 'pendente'";
                                $conn->prepare($sql)->execute([':inviter_id' => $inviter_id, ':user_id' => $id, ':desafio_id' => $desafio_id]);
                                $_SESSION['feedback_geral'] = "<span class='info-message'>Convite de fusão recusado.</span>";
                            }
                            $conn->prepare("UPDATE user_notifications SET is_read = 1 WHERE id = :nid AND user_id = :uid")->execute([':nid' => $notif_id_fusion, ':uid' => $id]);
                        } else { $_SESSION['feedback_geral'] = "<span class='error-message'>Dados convite fusão incompletos.</span>"; $conn->prepare("UPDATE user_notifications SET is_read = 1 WHERE id = :nid AND user_id = :uid")->execute([':nid' => $notif_id_fusion, ':uid' => $id]); }
                    } else { $_SESSION['feedback_geral'] = "<span class='warning-message'>Convite fusão inválido.</span>"; }
              } catch (Exception $e) {
                  $_SESSION['feedback_geral'] = "<span class='error-message'>Erro processar convite fusão.</span>"; error_log("Erro fusion_action (Praca): " . $e->getMessage());
                  try { $conn->prepare("UPDATE user_notifications SET is_read = 1 WHERE id = :nid AND user_id = :uid")->execute([':nid' => $notif_id_fusion, ':uid' => $id]); } catch (PDOException $e_mark) {}
              } $notification_action_processed = true;
         }
     }
     // Entrada na Arena
     elseif (isset($_GET['arena_action']) && $_GET['arena_action'] === 'enter' && isset($_GET['notif_id']) && filter_var($_GET['notif_id'], FILTER_VALIDATE_INT) && isset($_GET['event_id']) && filter_var($_GET['event_id'], FILTER_VALIDATE_INT)) {
         $notif_id_arena = (int)$_GET['notif_id']; $event_id_arena = (int)$_GET['event_id'];
         try {
             if ($conn->prepare("UPDATE user_notifications SET is_read = 1 WHERE id = :nid AND user_id = :uid")->execute([':nid' => $notif_id_arena, ':uid' => $id])) {
                 $arena_url = "/script/arena/arenaroyalle.php?event_id=" . $event_id_arena; // <<<<< VERIFIQUE PATH ARENA
                 header("Location: " . $arena_url); exit();
             } else { $_SESSION['feedback_geral'] = "<span class='warning-message'>Não foi possível processar notificação arena.</span>"; }
         } catch (Exception $e) {
             $_SESSION['feedback_geral'] = "<span class='error-message'>Erro ao entrar na arena.</span>"; error_log("Erro arena_action (Praca): " . $e->getMessage());
             try { $conn->prepare("UPDATE user_notifications SET is_read = 1 WHERE id = :id AND user_id = :uid")->execute([':id'=>$notif_id_arena, ':uid'=>$id]); } catch(PDOException $em){}
         } $notification_action_processed = true;
     }

     // Redireciona para limpar GET params se alguma ação foi processada
     if ($notification_action_processed) { header("Location: praca.php"); exit(); }
}
// --- ===>>> FIM: Processar Ações GET <<<=== ---


// --- Coleta de Feedback da Sessão ---
// (Incluindo o feedback_geral que pode ter sido setado pelo GET handler ou POST)
if (isset($_SESSION['feedback_geral'])) { $mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . $_SESSION['feedback_geral']; unset($_SESSION['feedback_geral']); }


// --- Processamento Registro Arena (POST) ---
// (SEU CÓDIGO POST DA ARENA PERMANECE AQUI - SEM MUDANÇAS NECESSÁRIAS PARA A NOTIFICAÇÃO)
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['register'])) {
    // ... seu código POST completo aqui ...
     if (!isset($conn) || !($conn instanceof PDO)) { $_SESSION['feedback_geral'] = "<span class='error'>Erro DB POST.</span>"; header("Location: praca.php"); exit(); }
     $conn->beginTransaction();
     try {
         $stmt_evento_aberto = $conn->prepare("SELECT id, status, base_player_count FROM arena_eventos WHERE status = 'REGISTRO_ABERTO' ORDER BY data_inicio_evento DESC LIMIT 1 FOR UPDATE");
         $stmt_evento_aberto->execute();
         $evento_abberto = $stmt_evento_aberto->fetch(PDO::FETCH_ASSOC);
         if (!$evento_abberto) { throw new Exception("Nenhum evento REGISTRO_ABERTO."); }
         $id_evento_registro = $evento_abberto['id']; $required_players = 6; // Garante 6
         $stmt_check_reg_aberto = $conn->prepare("SELECT id FROM arena_registros WHERE id_usuario = ? AND id_evento = ?");
         $stmt_check_reg_aberto->execute([$id, $id_evento_registro]);
         if ($stmt_check_reg_aberto->fetch()) { $conn->commit(); $_SESSION['feedback_geral'] = "Já registrado."; header("Location: praca.php"); exit(); }
         $stmt_check_participando_andamento = $conn->prepare("SELECT r.id_evento FROM arena_registros r JOIN arena_eventos e ON r.id_evento = e.id WHERE r.id_usuario = ? AND e.status = 'EM_ANDAMENTO' AND r.status_participacao = 'PARTICIPANDO' LIMIT 1");
         $stmt_check_participando_andamento->execute([$id]);
         if ($active_reg = $stmt_check_participando_andamento->fetch(PDO::FETCH_ASSOC)) { $conn->rollBack(); $_SESSION['feedback_geral'] = "Já participando de outra Arena!"; header("Location: /script/arena/arenaroyalle.php?event_id=" . $active_reg['id_evento']); exit(); } // <<<<< VERIFIQUE PATH
         $stmt_register = $conn->prepare("INSERT INTO arena_registros (id_usuario, id_evento, status_participacao) VALUES (?, ?, 'REGISTRADO')");
         if (!$stmt_register->execute([$id, $id_evento_registro])) { throw new PDOException("Falha registrar."); }
         $stmt_count_players = $conn->prepare("SELECT COUNT(*) FROM arena_registros WHERE id_evento = ? AND status_participacao IN ('REGISTRADO', 'PARTICIPANDO')");
         $stmt_count_players->execute([$id_evento_registro]); $player_count = $stmt_count_players->fetchColumn();
         if ($player_count >= $required_players) {
             $stmt_start_event = $conn->prepare("UPDATE arena_eventos SET status = 'EM_ANDAMENTO', data_inicio_evento = NOW() WHERE id = ? AND status = 'REGISTRO_ABERTO'");
             if (!$stmt_start_event->execute([$id_evento_registro])) { throw new PDOException("Falha iniciar evento."); }
             if ($stmt_start_event->rowCount() == 0) { $conn->commit(); $_SESSION['feedback_geral'] = "Arena começando..."; header("Location: /script/arena/arenaroyalle.php?event_id=" . $id_evento_registro); exit(); } // <<<<< VERIFIQUE PATH
             $stmt_update_players = $conn->prepare("UPDATE arena_registros SET status_participacao = 'PARTICIPANDO' WHERE id_evento = ? AND status_participacao = 'REGISTRADO'");
             if (!$stmt_update_players->execute([$id_evento_registro])) { throw new PDOException("Falha atualizar players."); }
             $stmt_create_next_event = $conn->prepare("INSERT INTO arena_eventos (data_inicio_evento, data_inicio_registro, status, base_xp_reward, base_player_count, titulo) VALUES (NOW(), NOW(), 'REGISTRO_ABERTO', 100, ?, 'Arena Royalle')");
             if (!$stmt_create_next_event->execute([$required_players])) { throw new PDOException("Falha criar próximo."); }
             // Envio de Notificações
             try {
                 $stmt_get_participants = $conn->prepare("SELECT id_usuario FROM arena_registros WHERE id_evento = ? AND status_participacao = 'PARTICIPANDO'");
                 $stmt_get_participants->execute([$id_evento_registro]); $ids_participantes = $stmt_get_participants->fetchAll(PDO::FETCH_COLUMN, 0);
                 if (!empty($ids_participantes)) {
                     $sql_insert_notif = "INSERT INTO user_notifications (user_id, message_text, type, related_data, is_read, timestamp) VALUES (:user_id, :message, :type, :related_data, 0, NOW())";
                     $stmt_insert_notif = $conn->prepare($sql_insert_notif); $mensagem_notificacao = "A Arena começou!"; $tipo_notificacao = 'arena_start'; $dados_relacionados = json_encode(['event_id' => $id_evento_registro]);
                     foreach ($ids_participantes as $p_id) { $stmt_insert_notif->execute([':user_id'=> $p_id, ':message'=> $mensagem_notificacao, ':type'=> $tipo_notificacao, ':related_data'=> $dados_relacionados]); }
                 }
             } catch (PDOException $e_notif) { error_log("Erro notif arena start (Praca POST): " . $e_notif->getMessage()); }
             $conn->commit();
             $_SESSION['feedback_geral'] = "Arena começou! Entrando..."; header("Location: /script/arena/arenaroyalle.php?event_id=" . $id_evento_registro); exit(); // <<<<< VERIFIQUE PATH
         } else { $conn->commit(); $_SESSION['feedback_geral'] = "Registrado! Aguardando {$required_players} jogadores ({$player_count}/{$required_players})."; header("Location: praca.php"); exit(); }
     } catch (Throwable $e) {
         if ($conn->inTransaction()) { $conn->rollBack(); }
         error_log("Erro POST Arena Praca user {$id}: " . $e->getMessage());
         $feedback_error = ($e instanceof Exception && !($e instanceof PDOException)) ? $e->getMessage() : "Erro interno ao processar registro.";
         $_SESSION['feedback_geral'] = "<span class='error'>" . htmlspecialchars($feedback_error) . "</span>";
         header("Location: praca.php"); exit();
     }
} // Fim POST

// --- Lógica Geral da Página (GET) ---
try {
    // Conexão já feita
    // Updates de atividade, limpeza, expiração de desafios
    $conn->prepare("INSERT INTO praca_online (user_id, last_active) VALUES (?, NOW()) ON DUPLICATE KEY UPDATE last_active = NOW()")->execute([$id]);
    $conn->prepare("DELETE FROM praca_online WHERE last_active < NOW() - INTERVAL ? MINUTE")->execute([$intervalo_limpeza_minutos]);
    $conn->prepare("UPDATE pvp_challenges SET status = 'expired' WHERE status = 'pending' AND created_at < NOW() - INTERVAL ? SECOND")->execute([$challenge_duration_seconds]);

    // Busca dados do usuário
    $stmt_usuario = $conn->prepare("SELECT nome, nivel, hp, pontos, xp, ki, forca, id, defesa, velocidade, foto, tempo_sala, raca, zeni, ranking_titulo FROM usuarios WHERE id = :id_usuario");
    $stmt_usuario->execute([':id_usuario' => $id]); $usuario = $stmt_usuario->fetch(PDO::FETCH_ASSOC);
    if (!$usuario) { session_destroy(); header("Location: login.php?erro=UserNotFoundPracaFatal"); exit(); } // <<<<< VERIFIQUE PATH

    // Level Up Check (pode já ter sido feito no início, redundância segura)
    // $mensagens_lup = verificarLevelUpHome($conn, $id); if (!empty($mensagens_lup)) { /* ...rebuscar $usuario se precisar... */ }

    // Busca Ranks
    try { /* ... (código busca ranks idêntico anterior) ... */ $sql_rank_nivel = "SELECT rank_nivel FROM (SELECT id, ROW_NUMBER() OVER (ORDER BY nivel DESC, xp DESC, tempo_sala DESC) as rank_nivel FROM usuarios) AS ranked_by_level WHERE id = :user_id"; $stmt_rank_nivel = $conn->prepare($sql_rank_nivel); $stmt_rank_nivel->execute([':user_id' => $id]); $result_nivel = $stmt_rank_nivel->fetch(PDO::FETCH_ASSOC); if ($result_nivel) { $rank_nivel = $result_nivel['rank_nivel']; } $sql_rank_sala = "SELECT rank_sala FROM (SELECT id, ROW_NUMBER() OVER (ORDER BY tempo_sala DESC, id ASC) as rank_sala FROM usuarios) AS ranked_by_time WHERE id = :user_id"; $stmt_rank_sala = $conn->prepare($sql_rank_sala); $stmt_rank_sala->execute([':user_id' => $id]); $result_sala = $stmt_rank_sala->fetch(PDO::FETCH_ASSOC); if ($result_sala) { $rank_sala = $result_sala['rank_sala']; } } catch (PDOException $e_rank) { error_log("PDOException ranks praca.php user {$id}: " . $e_rank->getMessage()); }

     // ===>>> Busca NOTIFICAÇÕES NÃO LIDAS para o Popup <<<===
     try {
         $sql_unread_notif = "SELECT id, message_text, type, timestamp, related_data FROM user_notifications WHERE user_id = :user_id AND is_read = 0 ORDER BY timestamp ASC";
         $stmt_unread_notif = $conn->prepare($sql_unread_notif);
         if ($stmt_unread_notif && $stmt_unread_notif->execute([':user_id' => $id])) {
             $unread_notifications_for_popup = $stmt_unread_notif->fetchAll(PDO::FETCH_ASSOC);
         } else { error_log("Erro PDO fetch unread notifs user {$id} (Praca): " . print_r($conn->errorInfo() ?: ($stmt_unread_notif ? $stmt_unread_notif->errorInfo() : 'Prepare Failed'), true)); }
     } catch (PDOException $e_notif) { error_log("Erro PDO buscar notifs não lidas user {$id} (Praca): " . $e_notif->getMessage()); }
     // ===>>> FIM Busca Notificações Popup <<<===

    // Busca outros na praça
    $sql_outros = "SELECT u.id, u.nome, u.nivel FROM praca_online po JOIN usuarios u ON po.user_id = u.id WHERE po.last_active > NOW() - INTERVAL :intervalo_ativo MINUTE AND po.user_id != :current_user_id ORDER BY u.nome ASC"; $stmt_outros = $conn->prepare($sql_outros); $stmt_outros->bindValue(':intervalo_ativo', $intervalo_atividade_minutos, PDO::PARAM_INT); $stmt_outros->bindValue(':current_user_id', $id, PDO::PARAM_INT); $stmt_outros->execute(); $outros_na_praca = $stmt_outros->fetchAll(PDO::FETCH_ASSOC);
    // Busca chat history
    $sql_hist = "SELECT id, user_id, username, message_text, timestamp FROM ( SELECT id, user_id, username, message_text, timestamp FROM chat_messages ORDER BY id DESC LIMIT :limit_chat ) sub ORDER BY id ASC"; $stmt_hist = $conn->prepare($sql_hist); $stmt_hist->bindValue(':limit_chat', $chat_history_limit, PDO::PARAM_INT); $stmt_hist->execute(); $chat_history = $stmt_hist->fetchAll(PDO::FETCH_ASSOC);
    // Busca desafios pendentes
    $sql_challenges = "SELECT pc.id AS challenge_id, pc.challenger_id, u.nome AS challenger_name, pc.created_at FROM pvp_challenges pc JOIN usuarios u ON pc.challenger_id = u.id WHERE pc.challenged_id = :current_user_id AND pc.status = 'pending'"; $stmt_challenges = $conn->prepare($sql_challenges); $stmt_challenges->execute([':current_user_id' => $id]); $pending_challenges = $stmt_challenges->fetchAll(PDO::FETCH_ASSOC);

    // --- Lógica Arena (GET - Idêntica à anterior) ---
    $stmt_check_active_participation = $conn->prepare("SELECT ar.id_evento FROM arena_registros ar JOIN arena_eventos ae ON ar.id_evento = ae.id WHERE ar.id_usuario = ? AND ae.status = 'EM_ANDAMENTO' AND ar.status_participacao = 'PARTICIPANDO' LIMIT 1"); $stmt_check_active_participation->execute([$id]);
    if ($active_event_data = $stmt_check_active_participation->fetch(PDO::FETCH_ASSOC)) { $is_participating_active_arena = true; $active_event_id = $active_event_data['id_evento']; } else { $is_participating_active_arena = false; $active_event_id = null; }
    if ($is_participating_active_arena && $active_event_id !== null) {
        $stmt_get_user_arena = $conn->prepare("SELECT id, data_inicio_evento, base_player_count, titulo FROM arena_eventos WHERE id = ? AND status = 'EM_ANDAMENTO' LIMIT 1"); $stmt_get_user_arena->execute([$active_event_id]); $arena_ativa_usuario = $stmt_get_user_arena->fetch(PDO::FETCH_ASSOC);
        if ($arena_ativa_usuario) { $required_players = 6; $arena_ativa_usuario['base_player_count'] = $required_players; try { $stmt_c = $conn->prepare("SELECT COUNT(*) FROM arena_royalle_stats WHERE id_evento = ? AND hp_arena > 0"); $stmt_c->execute([$arena_ativa_usuario['id']]); $arena_ativa_usuario['active_players_count'] = $stmt_c->fetchColumn(); } catch (PDOException $e) { $arena_ativa_usuario['active_players_count'] = '?'; } $arena_do_usuario_para_exibir[] = $arena_ativa_usuario; }
        else { error_log("Praca GET: Dados arena ativa {$active_event_id} não encontrados user {$id}"); $is_participating_active_arena = false; $active_event_id = null; }
    }
    if (!$is_participating_active_arena) {
        $stmt_find_open = $conn->prepare("SELECT id, status, titulo, base_player_count FROM arena_eventos WHERE status = 'REGISTRO_ABERTO' ORDER BY data_inicio_evento DESC LIMIT 1"); $stmt_find_open->execute(); $open_event = $stmt_find_open->fetch(PDO::FETCH_ASSOC);
        if (!$open_event) { try { $required_players_create = 6; $stmt_create = $conn->prepare("INSERT INTO arena_eventos (data_inicio_evento, data_inicio_registro, status, base_xp_reward, base_player_count, titulo) VALUES (NOW(), NOW(), 'REGISTRO_ABERTO', 100, ?, 'Arena Royalle')"); if (!$stmt_create->execute([$required_players_create])) { throw new PDOException("Falha criar evento."); } $current_event_id = $conn->lastInsertId(); $current_event_status = 'REGISTRO_ABERTO'; $open_event_for_display = ['id' => $current_event_id, 'status' => $current_event_status, 'titulo' => 'Arena Royalle', 'base_player_count' => $required_players_create]; $current_reg_count = 0; $is_registered_current_event = false; $required_players = $required_players_create; } catch (Throwable $e) { error_log("Praca GET: Falha criar evento: " . $e->getMessage()); $current_event_status = "ERRO_CRIACAO"; $open_event_for_display = null; } }
        else { $open_event_for_display = $open_event; $current_event_id = $open_event['id']; $current_event_status = $open_event['status']; $required_players = 6; $open_event_for_display['base_player_count'] = $required_players; $current_reg_count = 0; try { $stmt_c = $conn->prepare("SELECT COUNT(*) FROM arena_registros WHERE id_evento = ? AND status_participacao IN ('REGISTRADO', 'PARTICIPANDO')"); $stmt_c->execute([$current_event_id]); $current_reg_count = $stmt_c->fetchColumn(); } catch (PDOException $e) { $current_reg_count = '?'; } $is_registered_current_event = false; try { $stmt_cr = $conn->prepare("SELECT id FROM arena_registros WHERE id_usuario = ? AND id_evento = ? AND status_participacao = 'REGISTRADO'"); $stmt_cr->execute([$id, $current_event_id]); if ($stmt_cr->fetch()) { $is_registered_current_event = true; } } catch (PDOException $e) { /* mantém false */ } }
        $current_event_status = $open_event_for_display['status'] ?? $current_event_status ?? 'ERRO_INESPERADO'; $current_event_id = $open_event_for_display['id'] ?? $current_event_id ?? null;
    }

} catch (PDOException $e) { error_log("Erro PDO geral praca.php user {$id}: " . $e->getMessage()); $mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") ."<span class='error'>Erro DB praça/arena.</span>"; if ($usuario === null && !headers_sent()) { header("Location: login.php?erro=DBErrorPracaFatal"); exit(); } }
catch (Exception $ex) { error_log("Erro GERAL praca.php user {$id}: " . $ex->getMessage()); $mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") ."<span class='error'>Erro inesperado.</span>"; if ($usuario === null && !headers_sent()) { header("Location: login.php?erro=GeneralErrorPracaFatal"); exit(); } }

// --- Validação final e Preparação HTML ---
// ... (código igual para calcular XP, foto, HP/Ki, nome formatado, etc.) ...
if (!$usuario || !is_array($usuario) || !isset($usuario['id'])) { die("Erro Crítico: Dados usuário inválidos pré-HTML."); }
$xp_necessario_calc = 0; $xp_percent = 0; $xp_necessario_display = 'N/A'; if (defined('XP_BASE_LEVEL_UP') && defined('XP_EXPOENTE_LEVEL_UP') && isset($usuario['nivel'])) { $nvl = filter_var($usuario['nivel'] ?? 1, FILTER_VALIDATE_INT, ['options'=>['min_range'=>1]]); if($nvl === false) $nvl = 1; $xp_nec = (int)ceil(XP_BASE_LEVEL_UP * pow($nvl, XP_EXPOENTE_LEVEL_UP)); $xp_nec = max(XP_BASE_LEVEL_UP, $xp_nec); $xp_necessario_display = formatNumber($xp_nec); if($xp_nec > 0 && isset($usuario['xp'])){ $xp_at = filter_var($usuario['xp'] ?? 0, FILTER_VALIDATE_INT); if($xp_at !== false){ $xp_percent = min(100, max(0, ($xp_at / $xp_nec) * 100)); } } } else { $xp_necessario_display = formatNumber(XP_BASE_LEVEL_UP); $xp_percent = 0; }
$nome_arquivo_foto = 'default.jpg'; if (!empty($usuario['foto'])) { $cfp = __DIR__ . '/uploads/' . $usuario['foto']; if (file_exists($cfp)) { $nome_arquivo_foto = $usuario['foto']; } else { error_log("Foto não existe: " . $cfp); } } $caminho_web_foto = 'uploads/' . htmlspecialchars($nome_arquivo_foto); // <<<<< VERIFIQUE PATH
$hp_atual_base = (int)($usuario['hp'] ?? 0); $ki_atual_base = (int)($usuario['ki'] ?? 0); $pode_entrar_templo_base = ($hp_atual_base > 0 && $ki_atual_base > 0); $mensagem_bloqueio_templo_base = 'Recupere HP/Ki base!';
if (function_exists('formatarNomeUsuarioComTag')) { $nome_formatado_usuario = formatarNomeUsuarioComTag($conn, $usuario); } else { $nome_formatado_usuario = htmlspecialchars($usuario['nome'] ?? 'ErroFunc'); }


// --- Array Sidebar (Reusado do Templo/Urunai) ---
$sidebarItems = [
    ['id' => 'praca', 'label' => 'Praça Central', 'href' => 'praca.php', 'icon' => 'img/praca.jpg', 'fa_icon' => 'fas fa-users'], // Página Atual
    ['id' => 'guia', 'label' => 'Guia do Guerreiro Z', 'href' => 'guia_guerreiro.php', 'icon' => 'img/guiaguerreiro.jpg', 'fa_icon' => 'fas fa-book-open'],
    ['id' => 'equipe', 'label' => 'Equipe Z', 'href' => 'script/grupos.php', 'icon' => 'img/grupos.jpg', 'fa_icon' => 'fas fa-users-cog'],
    ['id' => 'banco', 'label' => 'Banco Galáctico', 'href' => 'script/banco.php', 'icon' => 'img/banco.jpg', 'fa_icon' => 'fas fa-landmark'],
    ['id' => 'urunai', 'label' => 'Palácio da Vovó Uranai', 'href' => 'urunai.php', 'icon' => 'img/urunai.jpg', 'fa_icon' => 'fas fa-hat-wizard'],
    ['id' => 'kame', 'label' => 'Casa do Mestre Kame', 'href' => 'kame.php', 'icon' => 'img/kame.jpg', 'fa_icon' => 'fas fa-home'],
    ['id' => 'sala_tempo', 'label' => 'Sala do Templo', 'href' => 'templo.php', 'icon' => 'img/templo.jpg', 'fa_icon' => 'fas fa-hourglass-half'],
    ['id' => 'treinos', 'label' => 'Zona de Treinamento', 'href' => 'desafios/treinos.php', 'icon' => 'img/treinos.jpg', 'fa_icon' => 'fas fa-dumbbell'],
    ['id' => 'desafios', 'label' => 'Desafios Z', 'href' => 'desafios.php', 'icon' => 'img/desafios.jpg', 'fa_icon' => 'fas fa-scroll'],
    ['id' => 'esferas', 'label' => 'Buscar Esferas', 'href' => 'esferas.php', 'icon' => 'img/esferar.jpg', 'fa_icon' => 'fas fa-dragon'],
    ['id' => 'erros', 'label' => 'Relatar Erros', 'href' => 'erros.php', 'icon' => 'img/erro.png', 'fa_icon' => 'fas fa-bug'],
    ['id' => 'perfil', 'label' => 'Perfil de Guerreiro', 'href' => 'perfil.php', 'icon' => 'img/perfil.jpg', 'fa_icon' => 'fas fa-user-edit']
];

// --- Array Bottom Nav (Reusado do Templo/Urunai) ---
$bottomNavItems = [
    ['label' => 'Home', 'href' => 'home.php', 'icon' => '🏠', 'id'=>'home'],
    ['label' => 'Praça', 'href' => 'praca.php', 'icon' => '👥', 'id'=>'praca'], // Página Atual
    ['label' => 'Templo', 'href' => 'templo.php', 'icon' => '🏛️', 'id' => 'sala_tempo'],
    ['label' => 'Kame', 'href' => 'kame.php', 'icon' => '🐢', 'id'=>'kame'],
    ['label' => 'Perfil', 'href' => 'perfil.php', 'icon' => '👤', 'id'=>'perfil']
];
// Adiciona itens dinâmicos
$arenaPath = 'script/arena/arenaroyalle.php'; $treinosPath = 'desafios/treinos.php'; // <<<<< VERIFIQUE PATHS
$foundArena = false; $foundTreinos = false;
foreach ($bottomNavItems as $item) { if ($item['id'] === 'arena') $foundArena = true; if ($item['id'] === 'treinos') $foundTreinos = true; }
if (!$foundArena) { $bottomNavItems[] = ['label' => 'Arena', 'href' => $arenaPath, 'icon' => '⚔️', 'id' => 'arena']; }
if (!$foundTreinos) { $bottomNavItems[] = ['label' => 'Treinos', 'href' => $treinosPath, 'icon' => '💪', 'id' => 'treinos']; }

?>
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Praça Central - <?= htmlspecialchars($usuario['nome'] ?? 'Jogador') ?></title> <link rel="preconnect" href="https://fonts.googleapis.com"> <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin> <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* <<< CSS Base e Específico da Praça (IDÊNTICO AO SEU ORIGINAL) >>> */
        :root { --bg-image-url: url('https://c4.wallpaperflare.com/wallpaper/870/538/510/dragon-ball-dragon-ball-z-west-city-hd-wallpaper-preview.jpg'); --panel-bg: rgba(25, 28, 36, 0.88); --panel-border: rgba(255, 255, 255, 0.1); --text-primary: #e0e0e0; --text-secondary: #a0a0a0; --accent-color-1: #00e676; --accent-color-2: #ffab00; --accent-color-3: #2979ff; --danger-color: #ff5252; --disabled-color: #555e6d; --border-radius: 12px; --shadow: 0 6px 20px rgba(0, 0, 0, 0.4); /* Adicionados para modal */ --dbz-blue: #1a2a4d; --dbz-orange: #f5a623; --dbz-orange-dark: #e47d1e; --dbz-white: #ffffff; --dbz-light-grey: #f0f0f0; --dbz-dark-grey: #333333; --success-color: #00e676; --info-color: #29b6f6; --warning-color: #ffa726; --body-original-padding-bottom: 20px; --font-main: 'Roboto', sans-serif; }
        @keyframes pulse-glow-button{0%{box-shadow:0 0 8px var(--accent-color-2),inset 0 1px 1px rgba(255,255,255,.2);transform:scale(1)}70%{box-shadow:0 0 16px 4px var(--accent-color-2),inset 0 1px 1px rgba(255,255,255,.3);transform:scale(1.03)}100%{box-shadow:0 0 8px var(--accent-color-2),inset 0 1px 1px rgba(255,255,255,.2);transform:scale(1)}}
        @keyframes ki-charge{0%{background-size:100% 100%;opacity:.6}50%{background-size:150% 150%;opacity:1}100%{background-size:100% 100%;opacity:.6}}
        @keyframes fadeInChallenge { from { opacity: 0; transform: translateY(-10px); } to { opacity: 1; transform: translateY(0); } }
        *, *::before, *::after { margin: 0; padding: 0; box-sizing: border-box; }
        body { background-image: var(--bg-image-url); background-size: cover; background-position: center; background-attachment: fixed; color: var(--text-primary); font-family: var(--font-main); margin: 0; padding: 25px; min-height: 100vh; background-color: #111; overflow-x: hidden; }
        .feedback-container { width: 100%; max-width: 1200px; margin: 0 auto 25px auto; padding: 15px 25px; background-color: rgba(30, 34, 44, 0.92); border-radius: var(--border-radius); box-shadow: var(--shadow); text-align: center; font-weight: 500; font-size: 1rem; line-height: 1.6; border: 1px solid var(--panel-border); display: <?php echo !empty($mensagem_final_feedback) ? 'block' : 'none'; ?>; border-left-width: 5px; border-left-color: var(--accent-color-3); color: var(--text-primary); }
        .feedback-container:has(.error-message), .feedback-container:has(.error) { border-left-color: var(--danger-color); background-color: rgba(50, 30, 30, 0.95); }
        .feedback-container .error-message, .feedback-container .error { color: var(--danger-color) !important; font-weight: bold; }
        .feedback-container:has(.success-message) { border-left-color: var(--success-color); background-color: rgba(30, 50, 30, 0.95); }
        .feedback-container .success-message { color: var(--success-color) !important; font-weight: bold; }
        .feedback-container:has(.info-message) { border-left-color: var(--info-color); background-color: rgba(20, 40, 60, 0.95); }
        .feedback-container .info-message { color: var(--info-color) !important; font-weight: bold; }
        .feedback-container:has(.warning-message) { border-left-color: var(--warning-color); background-color: rgba(60, 50, 20, 0.95); }
        .feedback-container .warning-message { color: var(--warning-color) !important; font-weight: bold; }
        .container { width: 100%; max-width: 1500px; /* Aumentado */ display: flex; justify-content: center; gap: 25px; align-items: flex-start; margin-left: auto; margin-right: auto; }
        .coluna { background-color: var(--panel-bg); border-radius: var(--border-radius); padding: 25px; box-shadow: var(--shadow); border: 1px solid var(--panel-border); backdrop-filter: blur(5px); }
        .coluna-esquerda { width: 26%; min-width: 280px; text-align: center; display: flex; flex-direction: column; gap: 15px; }
        .player-card { margin-bottom: 8px; } .foto { width: 130px; height: 130px; border-radius: 50%; object-fit: cover; border: 4px solid var(--accent-color-1); margin-bottom: 12px; box-shadow: 0 0 15px rgba(0, 230, 118, 0.5); } .player-name { font-size: 1.4rem; font-weight: 700; color: #fff; margin-bottom: 2px; word-wrap: break-word; } .player-level { font-size: 1.05rem; font-weight: 500; color: var(--accent-color-1); margin-bottom: 4px; } .player-race { font-size: 0.85rem; font-weight: 500; color: var(--text-secondary); margin-bottom: 4px; } .player-rank { font-size: 0.85rem; font-weight: 500; color: var(--accent-color-3); margin-bottom: 12px; } .zeni-display { font-size: 1rem; color: var(--accent-color-2); font-weight: 700; margin-bottom: 8px; }
        .xp-bar-container { width: 100%; margin-bottom: 12px; } .xp-label { font-size: 0.75rem; color: var(--text-secondary); text-align: left; margin-bottom: 4px; display: block; } .xp-bar { height: 11px; background-color: rgba(0, 0, 0, 0.3); border-radius: 6px; overflow: hidden; position: relative; border: 1px solid rgba(255,255,255,0.1); } .xp-bar-fill { height: 100%; background: linear-gradient(90deg, var(--accent-color-3), var(--accent-color-1)); border-radius: 6px; transition: width 0.5s ease-in-out; animation: ki-charge 1.5s linear infinite; } .xp-text { position: absolute; top: -1px; left: 0; right: 0; font-size: 0.65rem; font-weight: 500; color: #fff; text-shadow: 1px 1px 2px rgba(0,0,0,0.7); line-height: 13px; text-align: center; }
        .stats-grid { display: grid; grid-template-columns: auto 1fr; gap: 6px 12px; text-align: left; font-size: 0.85rem; width: 100%; } .stats-grid strong { color: var(--text-secondary); font-weight: 500; font-size: 0.8rem;} .stats-grid span { color: var(--text-primary); font-weight: 500; text-align: right; font-size: 0.85rem;} .stats-grid span[style*="--accent-color-2"]{color:var(--accent-color-2)} .stats-grid span[style*="--accent-color-1"]{color:var(--accent-color-1)}
        .divider { height: 1px; background-color: var(--panel-border); border: none; margin: 12px 0; }
        .btn-pontos { display: inline-block; padding: 8px 15px; background: linear-gradient(45deg, var(--accent-color-2), #ffc107); color: #111; text-decoration: none; font-weight: 700; font-size: 0.9rem; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); margin-bottom: 8px; border: none; text-align: center; transition: all 0.2s ease; cursor: pointer; animation: pulse-glow-button 2.5s infinite alternate ease-in-out; } .btn-pontos a { color: inherit; text-decoration: none; } .btn-pontos:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4); filter: brightness(1.1); } .btn-pontos[style*="cursor: default"]{background:var(--disabled-color);color:var(--text-secondary);filter:none;box-shadow:none;animation:none;opacity:0.7}
        .action-button { display: block; width: 100%; padding: 10px 15px; border: none; border-radius: 8px; font-size: 0.85rem; font-weight: 500; text-decoration: none; text-align: center; cursor: pointer; transition: background-color 0.2s ease, transform 0.1s ease; } .action-button:hover { transform: scale(1.02); } .btn-perfil { background-color: var(--accent-color-1); color: #111; } .btn-perfil:hover { background-color: #00cf68; } .btn-logout { background-color: var(--danger-color); color: #fff; } .btn-logout:hover { background-color: #ff3d3d; }
        .coluna-central { width: 48%; display: flex; flex-direction: column; align-items: center; text-align: center; gap: 10px; } .coluna-central h2 { color: #fff; font-weight: 700; font-size: 1.7rem; margin-bottom: 10px; border-bottom: 2px solid var(--accent-color-2); padding-bottom: 8px; display: inline-block; } .coluna-central p { color: var(--text-primary); line-height: 1.5; font-size: 0.9rem; max-width: 550px; margin-bottom: 8px;} .coluna-central strong { color: var(--accent-color-1); }
        .praca-acoes { margin-top: 10px; display: grid; grid-template-columns: repeat(auto-fit, minmax(130px, 1fr)); gap: 8px; width: 100%; max-width: 450px; margin-bottom: 10px;} .praca-link { display: block; padding: 8px 12px; background-color: rgba(45, 52, 66, 0.7); color: var(--text-primary); text-decoration: none; text-align: center; border-radius: 6px; border: 1px solid rgba(255, 255, 255, 0.1); font-size: 0.8rem; font-weight: 500; transition: all 0.2s ease; } .praca-link:hover { background-color: rgba(55, 62, 76, 0.9); border-color: rgba(255, 255, 255, 0.2); color: #fff; transform: translateY(-2px); } .praca-link.disabled { background-color: var(--disabled-color); color: #8894a8; cursor: not-allowed; opacity: 0.7; } .praca-link.disabled:hover { transform: none; background-color: var(--disabled-color); }
        .coluna-central h3 { color: var(--accent-color-1); font-weight: 500; font-size: 1.05rem; margin-top: 15px; margin-bottom: 8px; width: 100%; text-align: center; padding-bottom: 6px; border-bottom: 1px solid var(--panel-border); }
        #challenge-notifications { margin-top: 0px; margin-bottom: 10px; width: 100%; max-width: 500px; } .challenge-notification { background-color: rgba(255, 171, 0, 0.15); border: 1px solid var(--accent-color-2); border-radius: 8px; padding: 10px 12px; margin-bottom: 8px; display: flex; flex-direction: column; align-items: center; gap: 8px; animation: fadeInChallenge 0.5s ease; } .challenge-text { font-size: 0.9rem; text-align: center; } .challenge-text strong { color: var(--accent-color-1); } .challenge-text small { font-size: 0.8em; color: var(--text-secondary); margin-left: 5px; } .challenge-actions { display: flex; gap: 8px; margin-top: 4px; } .challenge-actions button { padding: 5px 10px; font-size: 0.8rem; border-radius: 5px; border: none; font-weight: 500; cursor: pointer; transition: background-color 0.2s ease, transform 0.1s ease; } .challenge-actions button:hover { transform: scale(1.05); } .btn-aceitar { background-color: var(--accent-color-1); color: #111; } .btn-aceitar:hover { background-color: #00c853; } .btn-recusar { background-color: var(--danger-color); color: #fff; } .btn-recusar:hover { background-color: #d63031; }
        .lista-jogadores-praca { list-style: none; padding: 0; width: 100%; max-width: 400px; max-height: 110px; overflow-y: auto; margin-top: 0; border: 1px solid var(--panel-border); border-radius: 8px; padding: 8px; background-color: rgba(0,0,0,0.1); } .jogador-item { display: flex; justify-content: space-between; align-items: center; background-color: rgba(255, 255, 255, 0.05); padding: 5px 10px; border-radius: 6px; margin-bottom: 5px; font-size: 0.8rem; gap: 8px; } .jogador-item:last-child { margin-bottom: 0; } .jogador-info { display: flex; flex-direction: column; align-items: flex-start; flex-grow: 1; } .jogador-item .nome { color: var(--text-primary); font-weight: 500; } .jogador-item .nivel { color: var(--accent-color-1); font-size: 0.75rem; font-weight: bold; } .jogador-info .player-profile-link { text-decoration: none; color: inherit; display: inline-block; transition: color 0.2s ease; } .jogador-info .player-profile-link:hover .nome { text-decoration: underline; color: var(--accent-color-2); } .btn-desafiar { padding: 3px 8px; font-size: 0.75rem; font-weight: 500; color: #fff; background-color: var(--danger-color); border: none; border-radius: 5px; cursor: pointer; transition: background-color 0.2s ease; white-space: nowrap; } .btn-desafiar:hover { background-color: #d63031; } .btn-desafiar:disabled { background-color: var(--disabled-color); cursor: not-allowed; opacity: 0.7; } .praca-vazia { color: var(--text-secondary); text-align: center; font-style: italic; margin-top: 8px; font-size: 0.85rem; } .lista-jogadores-praca::-webkit-scrollbar { width: 6px; } .lista-jogadores-praca::-webkit-scrollbar-track { background: rgba(0,0,0,0.1); border-radius: 3px;} .lista-jogadores-praca::-webkit-scrollbar-thumb { background-color: rgba(255, 255, 255, 0.2); border-radius: 3px; } .lista-jogadores-praca::-webkit-scrollbar-thumb:hover { background-color: rgba(255, 255, 255, 0.4); }
        .chat-container-ajax { width: 100%; margin-top: 15px; border: 1px solid var(--panel-border); border-radius: var(--border-radius); background-color: rgba(0,0,0,0.2); display: flex; flex-direction: column; height: 250px; } /* Chat dentro da coluna esquerda */
        .coluna-esquerda .chat-messages-display { flex-grow: 1; overflow-y: auto; padding: 10px; display: flex; flex-direction: column; gap: 8px; } .coluna-esquerda .chat-messages-display::-webkit-scrollbar { width: 8px; } .coluna-esquerda .chat-messages-display::-webkit-scrollbar-track { background: rgba(0,0,0,0.1); border-radius: 4px;} .coluna-esquerda .chat-messages-display::-webkit-scrollbar-thumb { background-color: rgba(255, 255, 255, 0.2); border-radius: 4px; border: 1px solid rgba(0,0,0,0.2); } .coluna-esquerda .chat-messages-display::-webkit-scrollbar-thumb:hover { background-color: rgba(255, 255, 255, 0.4); }
        .chat-message-ajax { max-width: 85%; padding: 6px 10px; border-radius: 10px; line-height: 1.4; font-size: 0.85rem; word-wrap: break-word; background-color: rgba(255, 255, 255, 0.08); align-self: flex-start; border-bottom-left-radius: 2px; color: var(--text-primary); } .chat-message-ajax.mine { background-color: rgba(41, 121, 255, 0.3); align-self: flex-end; border-bottom-right-radius: 2px; border-bottom-left-radius: 10px; } .chat-message-ajax .sender { font-weight: 700; font-size: 0.7rem; color: var(--accent-color-1); display: block; margin-bottom: 2px; } .chat-message-ajax .sender small { font-size: 0.8em; color: var(--text-secondary); font-weight: 400; margin-left: 5px; } .chat-message-ajax .msg-text { color: inherit; }
        .coluna-esquerda .chat-input-area { display: flex; padding: 8px; border-top: 1px solid var(--panel-border); background-color: rgba(0,0,0,0.2); } .coluna-esquerda .chat-input-area input[type="text"] { flex-grow: 1; padding: 8px 10px; border: 1px solid var(--panel-border); border-radius: 15px 0 0 15px; background-color: rgba(0,0,0,0.3); color: var(--text-primary); font-size: 0.85rem; outline: none; } .coluna-esquerda .chat-input-area button { padding: 8px 12px; border: none; background-color: var(--accent-color-3); color: white; border-radius: 0 15px 15px 0; cursor: pointer; font-weight: 500; font-size: 0.85rem; transition: background-color 0.2s ease; } .coluna-esquerda .chat-input-area button:hover { background-color: #216ae1; }
        .chat-loading, .chat-empty, .chat-error { text-align: center; color: var(--text-secondary); padding: 20px; font-style: italic; font-size: 0.9rem;}
        .coluna-direita { width: 26%; min-width: 250px; padding: 15px; display: flex; flex-direction: column; gap: 8px; } /* Estilo botões nav direita idêntico anterior */
        .nav-button { display: grid; grid-template-columns: 45px 1fr; align-items: center; gap: 12px; padding: 10px 12px 10px 8px; background: linear-gradient(to bottom, rgba(55, 62, 76, 0.85), rgba(40, 44, 52, 0.85)); color: var(--text-secondary); text-decoration: none; border-radius: 8px; border: 1px solid var(--panel-border); font-size: 0.85rem; font-weight: 500; transition: all 0.2s ease; position: relative; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.2); cursor: pointer; } .nav-button-icon-area { grid-column: 1 / 2; display: flex; justify-content: center; align-items: center; width: 100%; height: 28px; } .nav-button-icon { width: 28px; height: 28px; object-fit: contain; opacity: 0.7; transition: opacity 0.2s ease, transform 0.2s ease; display: block; margin: 0; flex-shrink: 0;} .nav-button i.fas { font-size: 22px; opacity: 0.7; transition: opacity 0.2s ease, transform 0.2s ease; color: inherit; } .nav-button span { grid-column: 2 / 3; text-align: left; } .nav-button:hover { background: linear-gradient(to bottom, rgba(65, 72, 86, 0.95), rgba(50, 54, 62, 0.95)); border-color: rgba(255, 255, 255, 0.3); color: #fff; transform: translateY(-2px) scale(1.01); box-shadow: 0 5px 10px rgba(0,0,0,0.3), 0 0 8px rgba(41, 121, 255, 0.4); } .nav-button:hover .nav-button-icon, .nav-button:hover i.fas { opacity: 1; transform: scale(1.05); } .nav-button:active { transform: translateY(0px) scale(1.0); box-shadow: 0 2px 4px rgba(0,0,0,0.2); filter: brightness(0.95); } .nav-button.active { background: linear-gradient(to bottom, var(--accent-color-1), #00c853); color: #000; border-color: rgba(0, 230, 118, 0.5); font-weight: 700; box-shadow: 0 3px 6px rgba(0,0,0,0.3), inset 0 1px 1px rgba(255,255,255,0.2); } .nav-button.active .nav-button-icon, .nav-button.active i.fas { opacity: 1; filter: brightness(0.8); } .nav-button.active:hover { filter: brightness(1.1); box-shadow: 0 5px 10px rgba(0,0,0,0.3), 0 0 8px var(--accent-color-1); } .nav-button.disabled { background: var(--disabled-color) !important; color: #8894a8 !important; cursor: not-allowed !important; border-color: rgba(0, 0, 0, 0.2) !important; opacity: 0.6 !important; box-shadow: none !important; } .nav-button.disabled:hover { background: var(--disabled-color) !important; transform: none !important; border-color: rgba(0, 0, 0, 0.2) !important; color: #8894a8 !important; box-shadow: none !important; } .nav-button.disabled .nav-button-icon, .nav-button.disabled i.fas { filter: grayscale(100%); opacity: 0.5; } .nav-button.logout:hover { background: linear-gradient(to bottom, var(--danger-color), #c0392b) !important; border-color: rgba(255, 255, 255, 0.2) !important; box-shadow: 0 5px 10px rgba(0,0,0,0.3), 0 0 8px var(--danger-color) !important; }
        #bottom-nav { display: none; }
        .arena-register-section { background-color: rgba(28, 28, 40, 0.1); padding: 20px; border-radius: 10px; border: 1px solid var(--panel-border); text-align: center; max-width: 600px; width: 100%; margin: 20px auto; } .arena-register-section h3.arena-section-title { color: var(--accent-color-2); margin-top: 0; margin-bottom: 15px; border-bottom: 1px solid var(--panel-border); padding-bottom: 8px; font-size: 1.2rem; font-weight: 500; } .arena-register-section h3.arena-section-title:nth-of-type(2) { color: #e9c46a; margin-top: 25px; } .arena-register-section p { margin-bottom: 10px; line-height: 1.5; color: var(--text-secondary); font-size: 0.85rem; } .arena-register-section p strong { color: var(--text-primary); font-weight: 500; } .arena-register-section .error { color: var(--danger-color) !important; font-weight: bold; } .arena-register-section form { margin-top: 15px; } .arena-register-section button { background-color: #e94560; color: white; padding: 10px 20px; border: none; border-radius: 5px; font-size: 0.9em; cursor: pointer; transition: background-color 0.3s ease, opacity 0.3s ease; margin: 5px; } .arena-register-section button:hover:not(:disabled) { background-color: #c23148; } .arena-register-section button:disabled { background-color: var(--disabled-color); opacity: 0.7; cursor: not-allowed; } .arena-register-section a { color: #a7c957; text-decoration: none; font-weight: bold; font-size: 0.9em; } .arena-register-section a:hover { text-decoration: underline; } .arena-register-section .arena-list { text-align: left; margin-top: 15px; border-top: none; padding-top: 0; } .arena-register-section .arena-item { background-color: rgba(78, 74, 104, 0.2); padding: 10px 15px; border-radius: 5px; margin-bottom: 10px; border-left: 3px solid #e9c46a; } .arena-register-section .arena-item strong { color: #fca311; } .arena-register-section .arena-item p { margin: 5px 0; font-size: 0.85em; color: var(--text-primary); } .arena-register-section .refresh-button-container { text-align: center; margin-bottom: 15px; } .arena-register-section .refresh-button { background-color: var(--accent-color-3); font-size: 0.8em; padding: 8px 15px; } .arena-register-section .refresh-button:hover { background-color: #216ae1; } details { padding: 0; border: none; background: none; margin: 0; } summary { display: none; }

         /* ===>>> CSS do Modal Popup <<<=== */
         .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.75); display: flex; justify-content: center; align-items: center; z-index: 1100; opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0s linear 0.3s; }
         .modal-overlay.visible { opacity: 1; visibility: visible; transition: opacity 0.3s ease; }
         .modal-popup { background-color: var(--panel-bg, #263238); padding: 25px 30px; border-radius: var(--border-radius, 10px); border: 1px solid var(--panel-border, rgba(255, 255, 255, 0.15)); box-shadow: var(--shadow, 0 8px 25px rgba(0, 0, 0, 0.5)); width: 90%; max-width: 450px; text-align: center; position: relative; transform: scale(0.9); transition: transform 0.3s ease; color: var(--text-primary, #e8eaed); }
         .modal-overlay.visible .modal-popup { transform: scale(1); }
         .modal-popup h3 { color: var(--dbz-orange, #f5a623); font-family: var(--font-main); margin-top: 0; margin-bottom: 15px; font-size: 1.4em; border-bottom: 1px solid var(--dbz-orange-dark, #e47d1e); padding-bottom: 10px; }
         .modal-popup #popup-message { color: inherit; font-size: 1rem; line-height: 1.6; margin-bottom: 25px; min-height: 40px; word-wrap: break-word; }
         .modal-popup #popup-actions { display: flex; justify-content: center; gap: 15px; flex-wrap: wrap; }
         .modal-popup .popup-action-btn { display: inline-block; padding: 10px 20px; border: none; border-radius: 6px; font-size: 0.9rem; font-weight: 500; text-decoration: none; text-align: center; cursor: pointer; transition: all 0.2s ease; min-width: 100px; }
         .popup-action-btn.btn-ok { background-color: var(--accent-color-3, #2979ff); color: #fff; }
         .popup-action-btn.btn-accept { background-color: var(--accent-color-1, #00e676); color: #111; }
         .popup-action-btn.btn-reject { background-color: var(--danger-color, #ff5252); color: #fff; }
         .popup-action-btn:hover { transform: translateY(-2px); filter: brightness(1.1); }
         .modal-close-btn { position: absolute; top: 10px; right: 15px; background: none; border: none; font-size: 1.8em; color: var(--text-secondary, #bdc1c6); cursor: pointer; line-height: 1; padding: 0; opacity: 0.7; }
         .modal-close-btn:hover { color: var(--text-primary, #e8eaed); opacity: 1; }
         /* ===>>> FIM CSS Modal Popup <<<=== */

         @media (max-width: 1200px) { body { padding: 15px; } .container { flex-direction: column; align-items: center; width: 100%; max-width: 95%; padding: 0; gap: 15px; } .coluna { width: 100% !important; max-width: 800px; margin-bottom: 15px; } .coluna-direita, .coluna-esquerda { min-width: unset; } .coluna-central { max-height: none; overflow-y: visible; } }
         @media (max-width: 768px) { body { padding: 10px; padding-bottom: 75px; } .feedback-container { font-size: 0.9rem; padding: 10px 15px; margin: 0 auto 10px auto;} .coluna-direita { display: none; } #bottom-nav { display: flex; position: fixed; bottom: 0; left: 0; right: 0; background-color: rgba(20, 23, 31, 0.97); border-top: 1px solid var(--panel-border); padding: 2px 0; box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.35); justify-content: space-around; align-items: stretch; z-index: 1000; backdrop-filter: blur(6px); height: 60px; } .bottom-nav-item { display: flex; flex-direction: column; align-items: center; justify-content: center; flex-grow: 1; text-decoration: none; color: var(--text-secondary); padding: 4px 2px; font-size: 0.65rem; text-align: center; transition: background-color 0.2s ease, color 0.2s ease; cursor: pointer; border-radius: 5px; margin: 2px; line-height: 1.2; font-family: var(--font-main); } .bottom-nav-item:not(.active):not(.disabled):hover { background-color: rgba(255, 255, 255, 0.05); color: var(--text-primary); } .bottom-nav-item.active { color: var(--accent-color-1); font-weight: bold; background-color: rgba(0, 230, 118, 0.1); } .bottom-nav-icon { font-size: 1.5rem; line-height: 1; margin-bottom: 4px; } .bottom-nav-label { font-size: inherit; } .bottom-nav-item.disabled { cursor: not-allowed; opacity: 0.5; color: #6a7383 !important; background-color: transparent !important; } .bottom-nav-item.disabled:hover { color: #6a7383 !important; } .coluna { padding: 15px; } .foto { width: 100px; height: 100px; } .player-name { font-size: 1.2rem; } .player-level { font-size: 0.95rem; } .stats-grid { font-size: 0.8rem; } .btn-pontos { font-size: 0.85rem; } .coluna-central h2 { font-size: 1.4rem; } .coluna-central h3 { font-size: 1.0rem; } .coluna-central p { font-size: 0.85rem; } .coluna-esquerda > div:last-child { margin-top: 15px; padding-top: 10px; border-top: 1px solid var(--panel-border); } .action-button { font-size: 0.85rem; padding: 10px 12px;} .lista-jogadores-praca { max-width: 100%; max-height: 110px; } .chat-container-ajax { height: 200px; } .praca-acoes { grid-template-columns: repeat(auto-fit, minmax(110px, 1fr)); max-width: 100%;} }
         @media (max-width: 480px) { body { padding: 8px; padding-bottom: 70px; } .container { gap: 8px; } .coluna { padding: 12px; margin-bottom: 8px; } .foto { width: 80px; height: 80px; border-width: 3px;} .player-name { font-size: 1.0rem; } .player-level { font-size: 0.85rem; } .player-race, .player-rank { font-size: 0.75rem; } .zeni-display { font-size: 0.9rem; } .xp-bar-container { margin-bottom: 8px;} .xp-label { font-size: 0.7rem;} .xp-bar { height: 9px;} .xp-text { font-size: 0.6rem; line-height: 11px;} .stats-grid { font-size: 0.75rem; gap: 4px 8px; } .stats-grid strong { font-weight: 400; font-size: 0.7rem;} .stats-grid span { font-size: 0.75rem;} .btn-pontos { font-size: 0.8rem; padding: 7px 12px;} .action-button { font-size: 0.8rem; padding: 9px 10px;} .coluna-central h2 { font-size: 1.2rem; } .coluna-central h3 { font-size: 0.95rem; } .coluna-central p, .chat-message-ajax, .lista-jogadores-praca { font-size: 0.8rem; } #bottom-nav { height: 55px; } .bottom-nav-icon { font-size: 1.2rem; } .bottom-nav-label { font-size: 0.6rem; } .feedback-container { font-size: 0.85rem; padding: 8px 12px; margin: 0 auto 8px auto;} .chat-container-ajax { height: 160px; } .praca-acoes { gap: 6px;} .praca-link { padding: 7px 10px; font-size: 0.75rem;} .lista-jogadores-praca { max-height: 90px; } .arena-register-section p { font-size: 0.8rem; } .arena-register-section button { padding: 8px 15px; font-size: 0.85em; } .arena-register-section .arena-item p { font-size: 0.8em; } }
    </style>
</head>
<body>
    <?php if (!empty($mensagem_final_feedback)): ?>
        <div class="feedback-container"><?= nl2br($mensagem_final_feedback) ?></div>
    <?php endif; ?>

    <div class="container">
        <?php // --- COLUNA ESQUERDA --- ?>
        <div class="coluna coluna-esquerda">
             <div class="player-card"> <img class="foto" src="<?= $caminho_web_foto ?>" alt="Foto de <?= htmlspecialchars($usuario['nome'] ?? '') ?>"> <div class="player-name"><?= $nome_formatado_usuario ?></div> <div class="player-level">Nível <?= htmlspecialchars($usuario['nivel'] ?? '?') ?></div> <div class="player-race">Raça: <?= htmlspecialchars($usuario['raca'] ?? 'N/D') ?></div> <div class="player-rank">Título: <?= htmlspecialchars($usuario['ranking_titulo'] ?? 'Iniciante') ?></div> </div> <div class="zeni-display">💰 Zeni: <?= formatNumber($usuario['zeni'] ?? 0) ?></div> <div class="xp-bar-container"> <span class="xp-label">Experiência</span> <div class="xp-bar"> <div class="xp-bar-fill" style="width: <?= $xp_percent ?>%;"></div> <div class="xp-text"><?= formatNumber($usuario['xp'] ?? 0) ?> / <?= $xp_necessario_display ?></div> </div> </div> <?php $pontos_num = filter_var($usuario['pontos'] ?? 0, FILTER_VALIDATE_INT); ?> <?php if ($pontos_num > 0 && basename($_SERVER['PHP_SELF']) !== 'perfil.php'): ?> <a href="perfil.php" class="btn-pontos"> <?= formatNumber($pontos_num) ?> Pts <span style="font-size: 0.8em;">(Distribuir)</span> </a> <?php elseif($pontos_num > 0): ?> <div class="btn-pontos" style="cursor: default;"><?= formatNumber($pontos_num) ?> Pts Disponíveis</div> <?php endif; ?> <div class="stats-grid"> <strong>HP Base</strong><span><?= formatNumber($usuario['hp'] ?? 0) ?></span> <strong>Ki Base</strong><span><?= formatNumber($usuario['ki'] ?? 0) ?></span> <strong>Força</strong><span><?= formatNumber($usuario['forca'] ?? 0) ?></span> <strong>Defesa</strong><span><?= formatNumber($usuario['defesa'] ?? 0) ?></span> <strong>Velocidade</strong><span><?= formatNumber($usuario['velocidade'] ?? 0) ?></span> <strong>Pontos</strong><span style="color: var(--accent-color-2); font-weight:700;"><?= formatNumber($usuario['pontos'] ?? 0) ?></span> <strong>Rank (Nível)</strong><span style="color: var(--accent-color-1); font-weight:700;"><?= htmlspecialchars($rank_nivel) ?><?= ($rank_nivel !== 'N/A' ? 'º' : '') ?></span> <strong>Rank (Sala)</strong><span style="color: var(--accent-color-1); font-weight:700;"><?= htmlspecialchars($rank_sala) ?><?= ($rank_sala !== 'N/A' ? 'º' : '') ?></span> </div> <div class="divider"></div> <div class="stats-grid" style="font-size: 0.85rem;"> <strong>ID</strong><span><?= htmlspecialchars($usuario['id'] ?? 'N/A') ?></span> <strong>Tempo Sala</strong><span><?= formatNumber($usuario['tempo_sala'] ?? 0) ?> min</span> </div>
              <h3 style="font-size: 1rem; color: var(--accent-color-3); margin-top: 15px; margin-bottom: 8px; text-align: left; border-bottom: 1px solid var(--panel-border); padding-bottom: 5px;">Chat da Praça</h3>
             <div class="chat-container-ajax">
                 <div id="chat-messages-ajax" class="chat-messages-display">
                      <?php if (!empty($chat_history)):
                          $chatHistoryCount = count($chat_history); $messageCounter = 0;
                          foreach ($chat_history as $msg):
                              $messageCounter++; $isLastMessage = ($messageCounter === $chatHistoryCount); ?>
                              <div class="chat-message-ajax <?= $msg['user_id'] == $id ? 'mine' : 'other' ?>"
                                  data-message-id="<?= $msg['id'] ?>"
                                  <?= $isLastMessage ? 'id="last-initial-message"' : '' ?> >
                                  <span class="sender"><?= htmlspecialchars($msg['username']) ?> <small>(<?= date('H:i', strtotime($msg['timestamp'])) ?>)</small></span>
                                  <span class="msg-text"><?= htmlspecialchars($msg['message_text']) ?></span>
                              </div>
                          <?php endforeach;
                          else: ?>
                          <p class="chat-empty">Nenhuma mensagem recente.</p>
                      <?php endif; ?>
                 </div>
                 <form id="chat-form-ajax" class="chat-input-area">
                     <input type="text" id="chat-message-input" placeholder="Digite sua mensagem..." autocomplete="off" required maxlength="500">
                     <button type="submit">Enviar</button>
                 </form>
             </div>
             <div style="margin-top: auto; padding-top: 15px; display: flex; flex-direction: column; gap: 10px;">
                 <a class="action-button btn-perfil" href="perfil.php">Editar Perfil</a> <?php // <<<<< VERIFIQUE PATH ?>
                 <a class="action-button btn-logout" href="sair.php">Sair (Logout)</a> <?php // <<<<< VERIFIQUE PATH ?>
             </div>
        </div>

        <?php // --- COLUNA CENTRAL --- ?>
        <div class="coluna coluna-central">
             <h2>Praça Central</h2> <p> O ponto de encontro dos guerreiros! Explore, converse e desafie outros lutadores. </p>
             <div class="praca-acoes">
                <a href="home.php" class="praca-link">Home</a> <?php // Link para home ?>
                <a href="templo.php" class="praca-link <?= $pode_entrar_templo_base ? '' : 'disabled' ?>" <?= !$pode_entrar_templo_base ? 'onclick="alert(\''.htmlspecialchars($mensagem_bloqueio_templo_base).'\'); return false;" title="'.htmlspecialchars($mensagem_bloqueio_templo_base).'"' : 'title="Ir para Sala do Templo"' ?>>Templo</a>
                <a href="urunai.php" class="praca-link">Urunai</a> <?php // <<<<< VERIFIQUE PATH ?>
                <a href="kame.php" class="praca-link">Kame</a> <?php // <<<<< VERIFIQUE PATH ?>
                <a href="script/grupos.php" class="praca-link">Grupo</a> <?php // <<<<< VERIFIQUE PATH ?>
                <a href="desafios.php" class="praca-link">Desafios</a> <?php // <<<<< VERIFIQUE PATH ?>
                <a href="script/banco.php" class="praca-link">Banco</a> <?php // <<<<< VERIFIQUE PATH ?>
                <a href="#" class="praca-link disabled" title="Em Desenvolvimento">Missões</a>
             </div>

             <div id="challenge-notifications"> <?php foreach ($pending_challenges as $challenge): ?> <div class="challenge-notification" data-challenge-id="<?= $challenge['challenge_id'] ?>"> <span class="challenge-text"> <strong><?= formatarNomeUsuarioComTag($conn, ['id' => $challenge['challenger_id'], 'nome' => $challenge['challenger_name']]) ?></strong> te desafiou! <?php if (!empty($challenge['created_at'])) { echo '<small>(às ' . date('H:i', strtotime($challenge['created_at'])) . ')</small>'; } ?> </span> <div class="challenge-actions"> <button class="btn-aceitar" onclick="respondChallenge(<?= $challenge['challenge_id'] ?>, 'accept', this)">Aceitar</button> <button class="btn-recusar" onclick="respondChallenge(<?= $challenge['challenge_id'] ?>, 'decline', this)">Recusar</button> </div> </div> <?php endforeach; ?> </div>

             <hr style="border-color: var(--panel-border); margin: 15px 0; width: 90%;">

             <div class="arena-register-section">
                 <h3 class="arena-section-title">Arena Royalle</h3>
                 <div class="refresh-button-container" style="margin-bottom: 10px;"> <button onclick="window.location.href='praca.php';" class="refresh-button">Atualizar Status Arena</button> </div>
                 <?php if ($is_participating_active_arena): ?>
                      <h3 class="arena-section-title" style="color: #e9c46a;">Sua Arena Atual</h3>
                      <?php if (!empty($arena_do_usuario_para_exibir)): ?>
                          <div class="arena-list" style="text-align: left; padding-top: 0;">
                              <?php foreach ($arena_do_usuario_para_exibir as $arena_ativa): ?>
                                  <div class="arena-item">
                                      <p><strong>Título:</strong> <?php echo htmlspecialchars($arena_ativa['titulo'] ?? 'Arena Royalle'); ?></p>
                                      <p><strong>Início:</strong> <?php echo htmlspecialchars(date('d/m H:i', strtotime($arena_ativa['data_inicio_evento'] ?? 'now'))); ?></p>
                                      <p><strong>Jogadores Ativos:</strong> <?php echo htmlspecialchars($arena_ativa['active_players_count'] ?? '?'); ?> / <?php echo htmlspecialchars($arena_ativa['base_player_count'] ?? '?'); // Será 6 ?></p>
                                      <p style="margin-top: 5px;"><a href="/script/arena/arenaroyalle.php?event_id=<?= htmlspecialchars($arena_ativa['id']) ?>">Retornar à sua Arena</a></p> <?php // <<<<< VERIFIQUE PATH ?>
                                  </div>
                              <?php endforeach; ?>
                          </div>
                      <?php else: ?> <p class="error">Erro carregar dados sua arena ativa.</p> <?php endif; ?>
                 <?php else: ?>
                      <?php if ($current_event_status === 'REGISTRO_ABERTO' && $current_event_id !== null && $open_event_for_display): ?>
                          <p>Evento aberto para registro! (ID: <?php echo htmlspecialchars($current_event_id); ?>)</p>
                          <p>Necessários: <strong><?php echo htmlspecialchars($required_players); ?></strong> | Registrados: (<strong><?php echo htmlspecialchars($current_reg_count); ?> / <?php echo htmlspecialchars($required_players); ?></strong>)</p>
                          <?php if ($is_registered_current_event): ?>
                              <p style="color: var(--accent-color-1);"><strong>Registrado!</strong> Aguarde...</p>
                              <p style="font-size: 0.8em; color: var(--text-secondary);">(Redirecionamento automático ao iniciar)</p>
                              <form method="post" action="praca.php"><button type="submit" disabled>Registrado</button></form>
                          <?php else: ?>
                              <form method="post" action="praca.php"><input type="hidden" name="register" value="1"><button type="submit">Registrar</button></form>
                          <?php endif; ?>
                      <?php elseif ($current_event_status === "ERRO_CRIACAO" || $current_event_status === "ERRO_INESPERADO"): ?>
                           <p class="error">Erro ao carregar/criar evento. Tente atualizar.</p>
                      <?php else: ?>
                           <p>Nenhum evento aberto para registro.</p><p>Volte mais tarde ou atualize.</p>
                      <?php endif; ?>
                       <hr style="border-color: var(--panel-border); margin: 20px 0;">
                       <h3 class="arena-section-title" style="color: #e9c46a;">Sua Arena Atual</h3>
                       <p>Você não está participando de nenhuma Arena.</p>
                 <?php endif; ?>
             </div>

             <hr style="border-color: var(--panel-border); margin: 15px 0; width: 90%;">
             <h3>Guerreiros Presentes (Últimos <?= $intervalo_atividade_minutos ?> min)</h3>
             <?php if (!empty($outros_na_praca)): ?>
                  <ul class="lista-jogadores-praca">
                      <?php foreach ($outros_na_praca as $outro): ?> <li class="jogador-item"> <div class="jogador-info"> <a href="perfil.php?id=<?= htmlspecialchars($outro['id']) ?>" class="player-profile-link" title="Ver perfil de <?= htmlspecialchars($outro['nome']) ?>"> <span class="nome"><?= formatarNomeUsuarioComTag($conn, $outro) ?></span> </a> <span class="nivel">Nível <?= htmlspecialchars($outro['nivel']) ?></span> </div> <button class="btn-desafiar" data-target-id="<?= $outro['id'] ?>" onclick="sendChallenge(this)">Desafiar</button> </li> <?php endforeach; ?>
                  </ul>
             <?php else: ?> <p class="praca-vazia">A praça está tranquila.</p> <?php endif; ?>
        </div>

        <?php // --- COLUNA DIREITA (Navegação) --- ?>
        <div class="coluna coluna-direita">
             <?php
                 $currentPageBaseName = basename($_SERVER['PHP_SELF']); // praca.php
                 foreach ($sidebarItems as $item) {
                     $href = $item['href']; $label = htmlspecialchars($item['label']);
                     $iconPath = $item['icon'] ?? ''; $faIconClass = $item['fa_icon'] ?? 'fas fa-question-circle';
                     $idItem = $item['id']; $classe_extra = ''; $atributos_extra = ''; $title = $label;
                     $iconHtml = "<i class='{$faIconClass} nav-button-icon'></i>";
                     if (!empty($iconPath)) { $ifp = __DIR__ . '/' . $iconPath; if (file_exists($ifp)) { $iconHtml = '<img src="' . htmlspecialchars($iconPath) . '" class="nav-button-icon" alt="">'; } else { error_log("Icone nav D (img) nao encontrado praca.php: " . $ifp); } }
                     if ($idItem === 'sala_tempo') { if (!$pode_entrar_templo_base) { $classe_extra = ' disabled'; $atributos_extra = ' onclick="alert(\''.htmlspecialchars($mensagem_bloqueio_templo_base, ENT_QUOTES).'\'); return false;"'; $title = htmlspecialchars($mensagem_bloqueio_templo_base); $href = '#'; } else { $title = 'Entrar na Sala do Templo'; } }
                     $isCurrent = ($idItem === 'praca'); // Verifica se é a Praça
                     if ($isCurrent && strpos($classe_extra, 'disabled') === false) { $classe_extra .= ' active'; }
                     $finalHref = htmlspecialchars($href);
                     echo "<a class=\"nav-button{$classe_extra}\" href=\"{$finalHref}\" title=\"{$title}\" {$atributos_extra}>";
                     echo "<div class='nav-button-icon-area'>{$iconHtml}</div>"; echo "<span>{$label}</span>"; echo "</a>";
                 }
                  // Botão Sair
                  echo '<div style="margin-top: auto; padding-top: 10px; border-top: 1px solid var(--panel-border);">';
                  $sairIconPath = 'img/sair.jpg'; $sairIconHtml = '<i class="fas fa-sign-out-alt nav-button-icon"></i>'; // <<<<< VERIFIQUE PATH
                  if(file_exists(__DIR__.'/'.$sairIconPath)) { $sairIconHtml = '<img src="'.htmlspecialchars($sairIconPath).'" class="nav-button-icon" alt="Sair">'; }
                  echo '<a class="nav-button logout" href="sair.php" title="Sair do Jogo">'; // <<<<< VERIFIQUE PATH
                  echo "<div class='nav-button-icon-area'>{$sairIconHtml}</div>"; echo '<span>Sair</span></a>'; echo '</div>';
             ?>
        </div>
    </div> <?php // Fechamento .container ?>

    <?php // --- Bottom Nav --- ?>
    <nav id="bottom-nav">
         <?php
             $currentPageBaseNameNav = basename($_SERVER['PHP_SELF']); // praca.php
             foreach ($bottomNavItems as $item):
                 $url_destino_item = $item['href']; $itemIdNav = $item['id'] ?? null; $labelNav = htmlspecialchars($item['label']); $iconNav = $item['icon'];
                 $final_href = '#'; $final_onclick = ''; $final_title = ''; $extra_class = ''; $active_class = '';
                 $is_current_page_nav = ($itemIdNav === 'praca'); // Define Praça como ativa
                 if ($itemIdNav === 'sala_tempo') { if (!$pode_entrar_templo_base) { $final_onclick = ' onclick="alert(\'' . htmlspecialchars($mensagem_bloqueio_templo_base, ENT_QUOTES) . '\'); return false;"'; $final_title = htmlspecialchars($mensagem_bloqueio_templo_base, ENT_QUOTES); $extra_class = ' disabled'; } else { $final_href = htmlspecialchars($url_destino_item); $final_title = 'Entrar na Sala'; } }
                 else { $final_href = htmlspecialchars($url_destino_item); $final_title = 'Ir para ' . $labelNav; }
                 if ($is_current_page_nav && strpos($extra_class, 'disabled') === false) { $active_class = ' active'; }
                 echo "<a href='{$final_href}' class='bottom-nav-item{$active_class}{$extra_class}' {$final_onclick} title='{$final_title}'>";
                 echo "<span class='bottom-nav-icon'>{$iconNav}</span>"; echo "<span class='bottom-nav-label'>{$labelNav}</span>"; echo "</a>";
             endforeach;
         ?>
    </nav>

     <?php // --- ===>>> HTML do Modal Popup <<<=== --- ?>
     <div id="notification-popup-overlay" class="modal-overlay">
         <div class="modal-popup">
             <button class="modal-close-btn" onclick="markCurrentNotificationAsRead()" title="Marcar como lida">&times;</button>
             <h3>Nova Notificação</h3>
             <div id="popup-message">Carregando mensagem...</div>
             <div id="popup-actions"></div>
         </div>
     </div>

    <?php // --- JavaScript Essencial (Chat, Desafios, Arena Poll, BottomNav + NOVO Popup) --- ?>
    <script>
        // <<< Variáveis Globais (Chat, Desafios, Arena, Popup) >>>
        const chatMessagesDiv = document.getElementById('chat-messages-ajax');
        const chatForm = document.getElementById('chat-form-ajax');
        const messageInput = document.getElementById('chat-message-input');
        const challengeNotificationsDiv = document.getElementById('challenge-notifications');
        const currentUserId = <?php echo json_encode($id); ?>;
        const currentUsername_Chat = <?php echo json_encode($usuario['nome'] ?? 'Eu'); ?>;
        const chatHandlerUrl = 'chat_handler_ajax.php'; // <<<<< VERIFIQUE PATH
        let lastMessageId = 0; <?php $lmId = 0; if(!empty($chat_history)){ $lmsg = end($chat_history); if(isset($lmsg['id'])) $lmId = (int)$lmsg['id']; } echo 'lastMessageId = '.$lmId.';'; ?>
        let isFetchingChat = false; const chatPollInterval = 3500; let chatPollingIntervalId = null;
        // Arena Poll
        const isUserRegisteredForOpenArena = <?php echo json_encode($is_registered_current_event ?? false); ?>;
        const userRegisteredArenaEventId = <?php echo json_encode(($is_registered_current_event && isset($current_event_id)) ? $current_event_id : null); ?>;
        const arenaCheckInterval = 5000; let arenaStatusPollIntervalId = null;
        // ===>>> NOVAS Variáveis Popup Notificação <<<===
        const currentUserId_Popup = <?php echo json_encode((int)$id); ?>;
        const unreadNotifications = <?php echo json_encode($unread_notifications_for_popup); ?>;
        let currentNotification = null;
        const modalOverlay = document.getElementById('notification-popup-overlay');
        const popupMessage = document.getElementById('popup-message');
        const popupActions = document.getElementById('popup-actions');
        // ===>>> FIM Variáveis Popup <<<===

        // --- Funções Utilitárias ---
        function escapeHtml(unsafe){ if(typeof unsafe!=='string') return ''; return unsafe.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;");}
        function formatTimestamp(timestamp){ if(!timestamp) return '??:??'; try { let d=new Date(timestamp.replace(/-/g,'/')); if(!isNaN(d.getTime())) return d.toLocaleTimeString('pt-BR',{hour:'2-digit',minute:'2-digit'}); } catch(e){} const parts=timestamp.split(' '); if(parts.length>1&&parts[1].includes(':')){ const tp=parts[1].substring(0,5); if(/^\d{2}:\d{2}$/.test(tp)) return tp;} return '??:??'; }
        function scrollToBottomChat(){ if(chatMessagesDiv){ setTimeout(() => { chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight; }, 50); }}
        function checkEmptyChat() { if(!chatMessagesDiv) return; const e=chatMessagesDiv.querySelector('.chat-empty'); const h=chatMessagesDiv.querySelector('.chat-message-ajax'); if (!h&&!e){const p=document.createElement('p');p.className='chat-empty';p.textContent='Nenhuma msg.';chatMessagesDiv.innerHTML='';chatMessagesDiv.appendChild(p);} else if(h&&e){e.remove();} }

        // --- ===>>> Lógica do Modal Popup (Adaptada para Praca) <<<=== ---
        function showModal() { if (modalOverlay) modalOverlay.classList.add('visible'); }
        function hideModal() { if (modalOverlay) { modalOverlay.classList.remove('visible'); if(popupMessage) popupMessage.innerHTML = ''; if(popupActions) popupActions.innerHTML = ''; currentNotification = null; } }
        function markCurrentNotificationAsRead() { if (currentNotification?.id) { window.location.href = `praca.php?mark_read=${currentNotification.id}`; hideModal(); } else { hideModal(); } } // Aponta para praca.php
        function displayNextNotification() {
             if (!modalOverlay || !popupMessage || !popupActions) { console.error("Elementos modal não encontrados (Praca)."); return; }
             if (unreadNotifications?.length > 0) {
                  currentNotification = unreadNotifications[0]; if (!currentNotification) { hideModal(); return; }
                  popupMessage.textContent = currentNotification.message_text || 'Msg indisponível.'; popupActions.innerHTML = '';
                  const markReadLink = `praca.php?mark_read=${currentNotification.id}`; // Aponta para praca.php
                  let hasSpecificAction = false; let relatedData = {};
                  if (currentNotification.related_data) { try { relatedData = (typeof currentNotification.related_data === 'string') ? JSON.parse(currentNotification.related_data) : currentNotification.related_data; if(typeof relatedData !== 'object') relatedData={}; } catch(e) { console.error("Erro JSON (Praca):", e); relatedData={}; } }

                  if (currentNotification.type === 'invite') {
                      const groupId = relatedData.group_id;
                      if(groupId){ const aL=`praca.php?invite_action=accept&notif_id=${currentNotification.id}`; const rL=`praca.php?invite_action=reject&notif_id=${currentNotification.id}`; popupActions.innerHTML = `<a href="${aL}" class="popup-action-btn btn-accept">Aceitar Grupo</a><a href="${rL}" class="popup-action-btn btn-reject">Recusar</a>`; hasSpecificAction=true; }
                  } else if (currentNotification.type === 'fusion_invite') {
                      const invId=relatedData.inviter_id; const desId=relatedData.desafio_id;
                      if(invId&&desId){ const aL=`praca.php?fusion_action=accept&notif_id=${currentNotification.id}`; const rL=`praca.php?fusion_action=reject&notif_id=${currentNotification.id}`; popupActions.innerHTML = `<a href="${aL}" class="popup-action-btn btn-accept">Aceitar Fusão</a><a href="${rL}" class="popup-action-btn btn-reject">Recusar</a>`; hasSpecificAction=true; }
                  } else if (currentNotification.type === 'arena_start') {
                      const evId=relatedData.event_id;
                      if(evId){ const eL=`praca.php?arena_action=enter&notif_id=${currentNotification.id}&event_id=${evId}`; popupActions.innerHTML = `<a href="${eL}" class="popup-action-btn btn-accept">Entrar Arena</a><a href="${markReadLink}" class="popup-action-btn btn-ok">OK</a>`; hasSpecificAction=true; }
                  } else if (currentNotification.type === 'zeni_transfer_received') {
                      popupActions.innerHTML = `<a href="${markReadLink}" class="popup-action-btn btn-ok">OK</a>`; hasSpecificAction=true;
                  }

                  if (!hasSpecificAction) { popupActions.innerHTML = `<a href="${markReadLink}" class="popup-action-btn btn-ok">OK (Lida)</a>`; }
                  showModal();
             } else { hideModal(); }
        }
        // --- ===>>> FIM Lógica Modal Popup <<<=== ---


        // --- Lógica do Chat (Idêntica da versão anterior) ---
        function addChatMessageToDisplay(msg, isHistory=false){ if(!chatMessagesDiv||!msg||!msg.id||document.querySelector(`.chat-message-ajax[data-message-id="${msg.id}"]`)) return; checkEmptyChat(); const me=document.createElement('div'); me.className=`chat-message-ajax ${msg.user_id==currentUserId?'mine':'other'}`; me.dataset.messageId=msg.id; const ts=formatTimestamp(msg.timestamp); const sn=escapeHtml(msg.username||'???'); const mt=escapeHtml(msg.message_text||''); me.innerHTML=`<span class="sender">${sn} <small>(${ts})</small></span><span class="msg-text">${mt}</span>`; chatMessagesDiv.appendChild(me); if(!isHistory){scrollToBottomChat();} if(msg.id&&parseInt(msg.id)>lastMessageId){lastMessageId=parseInt(msg.id);} }
        if(chatForm&&messageInput){chatForm.addEventListener('submit',async(e)=>{ e.preventDefault();const m=messageInput.value.trim();if(m&&m.length<=500){messageInput.disabled=true;const b=chatForm.querySelector('button');if(b)b.disabled=true;const fd=new FormData();fd.append('message',m);try{const r=await fetch(`${chatHandlerUrl}?action=send`,{method:'POST',body:fd});const d=await r.json();if(d.success){messageInput.value='';setTimeout(fetchNewChatMessages,150);}else{alert('Erro: '+(d.error||'?'));}}catch(err){alert('Erro conexão envio.');}finally{messageInput.disabled=false;if(b)b.disabled=false;messageInput.focus();}}});}
        async function fetchNewChatMessages(){ if(isFetchingChat||document.hidden)return;isFetchingChat=true;try{const r=await fetch(`${chatHandlerUrl}?action=fetch&last_id=${lastMessageId}&t=${Date.now()}`);if(!r.ok){isFetchingChat=false;return;}const d=await r.json();if(d.success&&d.messages?.length>0){d.messages.forEach(m=>addChatMessageToDisplay(m,false));}if(d.last_processed_id&&parseInt(d.last_processed_id)>lastMessageId){lastMessageId=parseInt(d.last_processed_id);}}catch(err){}finally{isFetchingChat=false;}}
        function pollForChatUpdates(){fetchNewChatMessages();}

        // --- Lógica Desafios (Idêntica da versão anterior) ---
        async function sendChallenge(btn){const tId=btn.dataset.targetId;if(!tId)return;btn.disabled=true;btn.textContent='...';const fd=new FormData();fd.append('target_id',tId);try{const r=await fetch('challenge_handler.php?action=send',{method:'POST',body:fd});if(!r.ok)throw new Error(`Erro ${r.status}`);const d=await r.json();if(d.success)alert('Desafio enviado!');else alert('Erro: '+(d.error||'?'));}catch(err){alert('Erro conexão desafio.');}finally{btn.disabled=false;btn.textContent='Desafiar';}}
        function displayChallengeNotification(ch){if(!challengeNotificationsDiv||challengeNotificationsDiv.querySelector(`.challenge-notification[data-challenge-id="${ch.challenge_id}"]`))return;const ne=document.createElement('div');ne.className='challenge-notification';ne.dataset.challengeId=ch.challenge_id;let tsH='';try{const dt=new Date(ch.created_at.replace(/-/g,'/'));if(!isNaN(dt))tsH=`<small>(às ${dt.toLocaleTimeString('pt-BR',{hour:'2-digit',minute:'2-digit'})})</small>`;}catch(e){}const cNameF=ch.challenger_name_formatted||escapeHtml(ch.challenger_name||'??');ne.innerHTML=`<span class="challenge-text"><strong>${cNameF}</strong> te desafiou! ${tsH}</span><div class="challenge-actions"><button class="btn-aceitar" onclick="respondChallenge(${ch.challenge_id},'accept',this)">Aceitar</button><button class="btn-recusar" onclick="respondChallenge(${ch.challenge_id},'decline',this)">Recusar</button></div>`;challengeNotificationsDiv.appendChild(ne);}
        async function respondChallenge(chId,respAct,btn){const ne=btn?.closest('.challenge-notification');if(ne)ne.querySelectorAll('button').forEach(b=>b.disabled=true);const fd=new FormData();fd.append('challenge_id',chId);fd.append('response_action',respAct);try{const r=await fetch('challenge_handler.php?action=respond',{method:'POST',body:fd});const d=await r.json();if(d.success){if(ne)ne.remove();if(respAct==='accept'&&d.redirect_url)window.location.href=d.redirect_url;}else{alert('Erro: '+(d.error||'?'));if(ne)ne.querySelectorAll('button').forEach(b=>b.disabled=false);}}catch(err){alert('Erro conexão resposta.');if(ne)ne.querySelectorAll('button').forEach(b=>b.disabled=false);}}

        // --- Lógica Arena Poll (Idêntica da versão anterior) ---
        async function checkArenaStatus(){ if(!isUserRegisteredForOpenArena||!userRegisteredArenaEventId||document.hidden)return;try{const r=await fetch(`praca.php?action=check_arena_status&event_id=${userRegisteredArenaEventId}`);if(!r.ok){return;}const d=await r.json();if(d.success&&d.status==='EM_ANDAMENTO'){console.log('Arena iniciou! Redirecionando...');if(arenaStatusPollIntervalId){clearInterval(arenaStatusPollIntervalId);arenaStatusPollIntervalId=null;}window.location.href=`/script/arena/arenaroyalle.php?event_id=${userRegisteredArenaEventId}`;}else if(!d.success||['NOT_FOUND','CONCLUIDO','CANCELADO','ERROR_DB','ERROR_INTERNAL'].includes(d.status)){console.log(`Evento ${userRegisteredArenaEventId} não mais em registro (${d.status}). Parando poll.`);if(arenaStatusPollIntervalId){clearInterval(arenaStatusPollIntervalId);arenaStatusPollIntervalId=null;}}else{/* Continua verificando */}}catch(err){console.error('Erro JS check arena:',err);}}

        // --- Inicialização Geral e Lógica UI ---
        document.addEventListener('DOMContentLoaded', () => {
            // Botões Templo (links data-url)
            document.querySelectorAll('.entrar-templo-btn').forEach(b => { b.addEventListener('click', e => { e.preventDefault(); if (b.classList.contains('disabled')) return; const url = b.dataset.url; if (url) window.location.href = url; }); });
            // Botões Desabilitados com Alerta
            document.querySelectorAll('.nav-button.disabled[onclick*="alert"], .bottom-nav-item.disabled[onclick*="alert"], .praca-link.disabled[onclick*="alert"]').forEach(b=>{b.addEventListener('click',e=>{b.style.transition='box-shadow 0.1s ease';b.style.boxShadow='0 0 5px 2px var(--danger-color,#dc3545)';setTimeout(()=>{b.style.boxShadow='';},300);});});

            // Chat
            checkEmptyChat(); // Verifica se precisa mostrar msg inicial
            scrollToBottomChat(); // Scroll inicial chat
            if (chatPollingIntervalId) clearInterval(chatPollingIntervalId); // Inicia polling chat
            chatPollingIntervalId = setInterval(pollForChatUpdates, chatPollInterval);

            // Arena Poll
            if (isUserRegisteredForOpenArena && userRegisteredArenaEventId) { // Inicia polling arena se aplicável
                console.log(`User registrado Arena ID: ${userRegisteredArenaEventId}. Iniciando check.`);
                if (arenaStatusPollIntervalId) clearInterval(arenaStatusPollIntervalId);
                checkArenaStatus(); arenaStatusPollIntervalId = setInterval(checkArenaStatus, arenaCheckInterval);
            } else { console.log("Polling arena não iniciado."); }

            // ===>>> INICIALIZA Popup Notificação <<<===
            displayNextNotification(); // Mostra a primeira notificação não lida (se houver)
            if (modalOverlay) { modalOverlay.addEventListener('click', function(event) { if (event.target === modalOverlay) { markCurrentNotificationAsRead(); } }); }
            // ===>>> FIM Inicialização Popup <<<===

            // Lógica Bottom Nav
            const bottomNav = document.getElementById('bottom-nav'); const rightColumn = document.querySelector('.coluna-direita'); const bodyEl = document.body;
            function checkBottomNavVisibility() { if(!bottomNav || !rightColumn || !bodyEl) return; const originalPadding = getComputedStyle(bodyEl).getPropertyValue('--body-original-padding-bottom').trim() || '20px'; if (window.getComputedStyle(rightColumn).display === 'none') { bottomNav.style.display = 'flex'; bodyEl.style.paddingBottom = (bottomNav.offsetHeight + 15) + 'px'; } else { bottomNav.style.display = 'none'; bodyEl.style.paddingBottom = originalPadding; } }
            bodyEl.style.setProperty('--body-original-padding-bottom', getComputedStyle(bodyEl).paddingBottom); checkBottomNavVisibility(); window.addEventListener('resize', checkBottomNavVisibility); setTimeout(checkBottomNavVisibility, 300);

             // Fechar feedback após X segundos
             const feedbackBox = document.querySelector('.feedback-container');
             if (feedbackBox && window.getComputedStyle(feedbackBox).display !== 'none') {
                  setTimeout(() => { feedbackBox.style.transition = 'opacity 0.5s ease-out'; feedbackBox.style.opacity = '0'; setTimeout(() => { feedbackBox.style.display = 'none'; }, 500); }, 7000);
             }

             // --- Lida com visibilidade da aba ---
             document.addEventListener("visibilitychange", () => {
                 if (document.hidden) {
                     if (chatPollingIntervalId) { clearInterval(chatPollingIntervalId); chatPollingIntervalId = null; }
                     // Polling da arena já checa document.hidden
                 } else {
                     if (!chatPollingIntervalId) { pollForChatUpdates(); chatPollingIntervalId = setInterval(pollForChatUpdates, chatPollInterval); }
                     if (isUserRegisteredForOpenArena && userRegisteredArenaEventId) { checkArenaStatus(); if (!arenaStatusPollIntervalId) { arenaStatusPollIntervalId = setInterval(checkArenaStatus, arenaCheckInterval); } }
                 }
             });
        });
    </script>
</body>
</html>
<?php
if (isset($conn)) { $conn = null; } // Fecha conexão principal
?>