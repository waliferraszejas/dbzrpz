<?php



ini_set('display_errors', 1);

error_reporting(E_ALL);

session_start();

if (!isset($_SESSION['user_id'])) { header("Location: login.php"); exit(); }





require_once('conexao.php');

require_once('script/sala_functions.php');





$id = $_SESSION['user_id'];





$usuario = null;

$outros_na_praca = [];

$chat_history = [];

$pending_challenges = [];

$mensagem_final_feedback = "";

$currentPage = basename($_SERVER['PHP_SELF']);

$nome_formatado_usuario = 'ErroNome';

$rank_nivel = 'N/A';

$rank_sala = 'N/A';





if (!defined('XP_BASE_LEVEL_UP')) define('XP_BASE_LEVEL_UP', 1000);

if (!defined('XP_EXPOENTE_LEVEL_UP')) define('XP_EXPOENTE_LEVEL_UP', 1.5);

if (!defined('PONTOS_GANHO_POR_NIVEL')) define('PONTOS_GANHO_POR_NIVEL', 100);





$intervalo_atividade_minutos = 5;

$intervalo_limpeza_minutos = $intervalo_atividade_minutos * 2;

$chat_history_limit = 50;

$challenge_duration_seconds = 60;





function verificarLevelUpHome(PDO $pdo_conn, int $id_usuario): array {

$mensagens_level_up = [];

$tentativas = 0; $max_tentativas = 50;

while ($tentativas < $max_tentativas) {

$tentativas++; try {

$sql_select = "SELECT nivel, xp, pontos FROM usuarios WHERE id = :id_usuario"; $stmt_select = $pdo_conn->prepare($sql_select); $stmt_select->execute([':id_usuario' => $id_usuario]); $user_data = $stmt_select->fetch(PDO::FETCH_ASSOC);

if (!$user_data) { error_log("Usuário {$id_usuario} não encontrado loop LUP (em praca.php)."); break; }

$nivel_atual = (int)$user_data['nivel']; $xp_atual = (int)$user_data['xp']; $pontos_atuais = (int)($user_data['pontos'] ?? 0);

$xp_necessario = (int)ceil(XP_BASE_LEVEL_UP * pow($nivel_atual, XP_EXPOENTE_LEVEL_UP)); $xp_necessario = max(XP_BASE_LEVEL_UP, $xp_necessario);

if ($xp_atual >= $xp_necessario) {

$novo_nivel = $nivel_atual + 1; $novo_xp = $xp_atual - $xp_necessario; $novos_pontos = $pontos_atuais + PONTOS_GANHO_POR_NIVEL;

$sql_update = "UPDATE usuarios SET nivel = :nivel, xp = :xp, pontos = :pontos WHERE id = :id_usuario"; $stmt_update = $pdo_conn->prepare($sql_update);

$update_params = [ ':nivel' => $novo_nivel, ':xp' => $novo_xp, ':pontos' => $novos_pontos, ':id_usuario' => $id_usuario ];

if ($stmt_update->execute($update_params)) { $mensagens_level_up[] = "<strong>LEVEL UP!</strong> Nível {$novo_nivel}! +".PONTOS_GANHO_POR_NIVEL." pontos!"; error_log("User {$id_usuario} LUP Nível {$novo_nivel} (em praca.php). Pontos: {$novos_pontos}"); continue; }

else { error_log("PDO execute failed (UPDATE LUP em praca.php) user {$id_usuario}."); break; }

} else { break; }

} catch (PDOException $e) { error_log("PDOException loop LUP (em praca.php) user {$id_usuario}: " . $e->getMessage()); break; }

} if ($tentativas >= $max_tentativas) { error_log("Alerta: Loop LUP (em praca.php) user {$id_usuario} atingiu limite {$max_tentativas}."); } return $mensagens_level_up;

}





if (isset($_SESSION['feedback_geral'])) {

$mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . $_SESSION['feedback_geral'];

unset($_SESSION['feedback_geral']);

}

if (isset($_SESSION['feedback_cooldown'])) {

$mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . $_SESSION['feedback_cooldown'];

unset($_SESSION['feedback_cooldown']);

}





$current_event_status = null;

$current_event_id = null;

$is_registered_current_event = false;

$is_participating_active_arena = false;

$active_event_id = null;

$current_reg_count = 0;

$required_players = 3;

$lista_arenas_em_andamento = [];





if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['register'])) {

// ... (código de registro da arena permanece o mesmo) ...

if (!isset($conn) || !($conn instanceof PDO)) {

$mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . "<span class='error'>Erro crítico: Conexão com banco de dados não estabelecida antes do registro.</span>";

header("Location: praca.php");

exit();

}

$conn->beginTransaction();



try {

$stmt_evento_aberto = $conn->prepare("SELECT id, status FROM arena_eventos WHERE status = 'REGISTRO_ABERTO' ORDER BY data_inicio_evento DESC LIMIT 1 FOR UPDATE");

$stmt_evento_aberto->execute();

$evento_abberto = $stmt_evento_aberto->fetch(PDO::FETCH_ASSOC);



if (!$evento_abberto) {

throw new Exception("Nenhum evento REGISTRO_ABERTO encontrado para registro. Recarregue a página.");

} else {

$id_evento_registro = $evento_abberto['id'];

}



$stmt_check_reg_aberto = $conn->prepare("SELECT id FROM arena_registros WHERE id_usuario = ? AND id_evento = ?");

$stmt_check_reg_aberto->execute([$id, $id_evento_registro]);

if ($stmt_check_reg_aberto->fetch()) {

$conn->commit();

$_SESSION['feedback_geral'] = "Você já está registrado para a próxima Arena. Aguarde o início.";

header("Location: praca.php");

exit();

}



$stmt_check_reg_andamento = $conn->prepare("SELECT r.id, r.id_evento FROM arena_registros r JOIN arena_eventos e ON r.id_evento = e.id WHERE r.id_usuario = ? AND e.status = 'EM_ANDAMENTO' LIMIT 1");

$stmt_check_reg_andamento->execute([$id]);

if ($active_reg = $stmt_check_reg_andamento->fetch(PDO::FETCH_ASSOC)) {

$conn->rollBack();

$_SESSION['feedback_geral'] = "Você já está em uma Arena em andamento!";

header("Location: arena/arenaroyalle.php");

exit();

}



$stmt_register = $conn->prepare("INSERT INTO arena_registros (id_usuario, id_evento, status_participacao) VALUES (?, ?, 'REGISTRADO')");

if (!$stmt_register->execute([$id, $id_evento_registro])) {

throw new PDOException("Falha ao registrar usuário na arena_registros.");

}



$stmt_count_players = $conn->prepare("SELECT COUNT(*) FROM arena_registros WHERE id_evento = ? AND status_participacao IN ('REGISTRADO', 'PARTICIPANDO')");

$stmt_count_players->execute([$id_evento_registro]);

$player_count = $stmt_count_players->fetchColumn();



if ($player_count >= $required_players) {

$stmt_start_event = $conn->prepare("UPDATE arena_eventos SET status = 'EM_ANDAMENTO', data_inicio_evento = NOW() WHERE id = ?");

if (!$stmt_start_event->execute([$id_evento_registro])) {

error_log("praca.php (Arena Register): Falha ao iniciar evento {$id_evento_registro}.");

}



$stmt_create_next_event = $conn->prepare("INSERT INTO arena_eventos (data_inicio_evento, data_inicio_registro, status, base_xp_reward, base_player_count, titulo) VALUES (NOW(), NOW(), 'REGISTRO_ABERTO', 100, 3, 'Arena Royalle')");

if (!$stmt_create_next_event->execute()) {

error_log("praca.php (Arena Register): Falha ao criar o próximo evento REGISTRO_ABERTO após iniciar {$id_evento_registro}.");

}



$conn->commit();



$_SESSION['feedback_geral'] = "Você se registrou, e a Arena começou! Entrando...";

header("Location: arena/arenaroyalle.php");

exit();



} else {

$conn->commit();



$_SESSION['feedback_geral'] = "Registrado com sucesso! Aguardando mais jogadores para a Arena iniciar ({$player_count}/{$required_players}).";

header("Location: praca.php");

exit();

}



} catch (Throwable $e) {

if ($conn->inTransaction()) {

$conn->rollBack();

}

error_log("Erro no processo de registro/início da Arena (em praca.php) para user {$id}: " . $e->getMessage());

$_SESSION['feedback_geral'] = "Erro ao tentar registrar para a Arena. Tente novamente mais tarde.";

header("Location: praca.php");

exit();

}

}





try {

// ... (código de busca de dados do usuário, ranks, etc. permanece o mesmo) ...



$sql_update_active = "INSERT INTO praca_online (user_id, last_active) VALUES (:user_id, NOW()) ON DUPLICATE KEY UPDATE last_active = NOW()"; $stmt_active = $conn->prepare($sql_update_active); $stmt_active->execute([':user_id' => $id]);



$sql_cleanup = "DELETE FROM praca_online WHERE last_active < NOW() - INTERVAL :intervalo MINUTE"; $stmt_cleanup = $conn->prepare($sql_cleanup); $stmt_cleanup->bindValue(':intervalo', $intervalo_limpeza_minutos, PDO::PARAM_INT); $stmt_cleanup->execute();



$sql_expire = "UPDATE pvp_challenges SET status = 'expired' WHERE status = 'pending' AND created_at < NOW() - INTERVAL :duration SECOND"; $stmt_expire = $conn->prepare($sql_expire); $stmt_expire->bindValue(':duration', $challenge_duration_seconds, PDO::PARAM_INT); $stmt_expire->execute();



$sql_fetch_user = "SELECT nome, nivel, hp, pontos, xp, ki, forca, id, defesa, velocidade, foto, tempo_sala, raca, zeni, ranking_titulo FROM usuarios WHERE id = :id_usuario";

$stmt_fetch = $conn->prepare($sql_fetch_user);

$stmt_fetch->execute([':id_usuario' => $id]);

$usuario = $stmt_fetch->fetch(PDO::FETCH_ASSOC);

if (!$usuario) { session_destroy(); header("Location: login.php?erro=UsuarioNaoEncontradoPracaFatal"); exit(); }



$mensagens_level_up_detectado = verificarLevelUpHome($conn, $id);

if (!empty($mensagens_level_up_detectado)) {

$mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . implode("<br>", $mensagens_level_up_detectado);

$stmt_refetch = $conn->prepare($sql_fetch_user);

$stmt_refetch->execute([':id_usuario' => $id]);

$usuario_atualizado = $stmt_refetch->fetch(PDO::FETCH_ASSOC);

if (!$usuario_atualizado) { throw new PDOException("Falha recarregar dados pós-LUP user {$id} (em praca.php)."); }

$usuario = $usuario_atualizado;

error_log("User {$id} dados recarregados pós LUP (em praca.php).");

}



try {

$sql_rank_nivel = "SELECT rank_nivel FROM (SELECT id, ROW_NUMBER() OVER (ORDER BY nivel DESC, xp DESC, tempo_sala DESC) as rank_nivel FROM usuarios) AS ranked_by_level WHERE id = :user_id";

$stmt_rank_nivel = $conn->prepare($sql_rank_nivel);

$stmt_rank_nivel->execute([':user_id' => $id]);

$result_nivel = $stmt_rank_nivel->fetch(PDO::FETCH_ASSOC);

if ($result_nivel) { $rank_nivel = $result_nivel['rank_nivel']; }



$sql_rank_sala = "SELECT rank_sala FROM (SELECT id, ROW_NUMBER() OVER (ORDER BY tempo_sala DESC, id ASC) as rank_sala FROM usuarios) AS ranked_by_time WHERE id = :user_id";

$stmt_rank_sala = $conn->prepare($sql_rank_sala);

$stmt_rank_sala->execute([':user_id' => $id]);

$result_sala = $stmt_rank_sala->fetch(PDO::FETCH_ASSOC);

if ($result_sala) { $rank_sala = $result_sala['rank_sala']; }

} catch (PDOException $e_rank) {

error_log("PDOException ao buscar ranks individuais para user {$id} em praca.php: " . $e_rank->getMessage());

}



$sql_outros = "SELECT u.id, u.nome, u.nivel FROM praca_online po JOIN usuarios u ON po.user_id = u.id WHERE po.last_active > NOW() - INTERVAL :intervalo_ativo MINUTE AND po.user_id != :current_user_id ORDER BY u.nome ASC"; $stmt_outros = $conn->prepare($sql_outros); $stmt_outros->bindValue(':intervalo_ativo', $intervalo_atividade_minutos, PDO::PARAM_INT); $stmt_outros->bindValue(':current_user_id', $id, PDO::PARAM_INT); $stmt_outros->execute(); $outros_na_praca = $stmt_outros->fetchAll(PDO::FETCH_ASSOC);



// Fetch chat history

$sql_hist = "SELECT id, user_id, username, message_text, timestamp FROM ( SELECT id, user_id, username, message_text, timestamp FROM chat_messages ORDER BY id DESC LIMIT :limit_chat ) sub ORDER BY id ASC"; $stmt_hist = $conn->prepare($sql_hist); $stmt_hist->bindValue(':limit_chat', $chat_history_limit, PDO::PARAM_INT); $stmt_hist->execute(); $chat_history = $stmt_hist->fetchAll(PDO::FETCH_ASSOC);



$sql_challenges = "SELECT pc.id AS challenge_id, pc.challenger_id, u.nome AS challenger_name, pc.created_at FROM pvp_challenges pc JOIN usuarios u ON pc.challenger_id = u.id WHERE pc.challenged_id = :current_user_id AND pc.status = 'pending'"; $stmt_challenges = $conn->prepare($sql_challenges); $stmt_challenges->execute([':current_user_id' => $id]); $pending_challenges = $stmt_challenges->fetchAll(PDO::FETCH_ASSOC);





// ... (código de verificação de arena ativa/aberta permanece o mesmo) ...

$open_event_for_display = null;



$stmt_check_active = $conn->prepare("SELECT ar.id_evento FROM arena_registros ar JOIN arena_eventos ae ON ar.id_evento = ae.id WHERE ar.id_usuario = ? AND ae.status = 'EM_ANDAMENTO' LIMIT 1");

$stmt_check_active->execute([$id]);

if ($active_event_id_for_user = $stmt_check_active->fetchColumn()) {

$is_participating_active_arena = true;

}



$stmt_list_active = $conn->prepare("SELECT id, data_inicio_evento, base_player_count, titulo FROM arena_eventos WHERE status = 'EM_ANDAMENTO' ORDER BY data_inicio_evento DESC");

$stmt_list_active->execute();

$raw_lista_arenas_em_andamento = $stmt_list_active->fetchAll(PDO::FETCH_ASSOC);



$lista_arenas_em_andamento = [];

foreach($raw_lista_arenas_em_andamento as $arena_ativa) {

$stmt_count_active_players = $conn->prepare("SELECT COUNT(*) FROM arena_registros WHERE id_evento = ? AND status_participacao = 'PARTICIPANDO'");

$stmt_count_active_players->execute([$arena_ativa['id']]);

$active_players_count = $stmt_count_active_players->fetchColumn();



if ($active_players_count > 0) {

$arena_ativa['active_players_count'] = $active_players_count;

$lista_arenas_em_andamento[] = $arena_ativa;

}

}



if (!$is_participating_active_arena) {

$stmt_find_open = $conn->prepare("SELECT id, status, titulo FROM arena_eventos WHERE status = 'REGISTRO_ABERTO' ORDER BY data_inicio_evento DESC LIMIT 1");

$stmt_find_open->execute();

$open_event = $stmt_find_open->fetch(PDO::FETCH_ASSOC);



if (!$open_event) {

try {

$stmt_create_event = $conn->prepare("INSERT INTO arena_eventos (data_inicio_evento, data_inicio_registro, status, base_xp_reward, base_player_count, titulo) VALUES (NOW(), NOW(), 'REGISTRO_ABERTO', 100, 3, 'Arena Royalle')");

if (!$stmt_create_event->execute()) {

throw new PDOException("Falha ao criar novo evento REGISTRO_ABERTO na carga da página.");

}

$current_event_id = $conn->lastInsertId();

$current_event_status = 'REGISTRO_ABERTO';

$open_event_for_display = ['id' => $current_event_id, 'status' => $current_event_status, 'titulo' => 'Arena Royalle'];



} catch (Throwable $e_create) {

error_log("Erro ao criar evento REGISTRO_ABERTO (em praca.php) para user {$id}: " . $e_create->getMessage());

$mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . "<span class='error'>Erro ao criar evento de registro.</span>";

$current_event_status = "ERRO_CRIACAO";

}



} else {

$current_event_id = $open_event['id'];

$current_event_status = $open_event['status'];

$open_event_for_display = $open_event;



$stmt_check_registered = $conn->prepare("SELECT id FROM arena_registros WHERE id_usuario = ? AND id_evento = ?");

$stmt_check_registered->execute([$id, $current_event_id]);

if ($stmt_check_registered->fetch()) {

$is_registered_current_event = true;

$stmt_count_reg = $conn->prepare("SELECT COUNT(*) FROM arena_registros WHERE id_evento = ? AND status_participacao IN ('REGISTRADO', 'PARTICIPANDO')");

$stmt_count_reg->execute([$current_event_id]);

$current_reg_count = $stmt_count_reg->fetchColumn();

}

}

$current_event_status = $open_event_for_display['status'] ?? $current_event_status;

$current_event_id = $open_event_for_display['id'] ?? $current_event_id;

}





} catch (PDOException $e) {

error_log("Erro PDO praca.php user {$id}: " . $e->getMessage());

$mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") ."<span class='error-message'>Erro carregar info praça/arena.</span>";

if ($usuario === null) { exit("Erro crítico ao carregar dados iniciais."); }

}

catch (Exception $ex) {

error_log("Erro GERAL praca.php user {$id}: " . $ex->getMessage());

$mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") ."<span class='error-message'>Erro inesperado.</span>";

if ($usuario === null) { exit("Erro crítico inesperado."); }

}







if (!$usuario || !is_array($usuario) || !isset($usuario['id'])) {

error_log("Erro Fatal: Dados do usuário inválidos pré-HTML ID: {$id}");

die("Erro Crítico: Não foi possível carregar dados do usuário.");

}





$xp_necessario_calc = 0;

$xp_percent = 0;

$xp_necessario_display = 'N/A';

$nivel_atual_num = 1;

if (defined('XP_BASE_LEVEL_UP') && defined('XP_EXPOENTE_LEVEL_UP') && isset($usuario['nivel'])) {

$nivel_atual_num = filter_var($usuario['nivel'] ?? 1, FILTER_VALIDATE_INT, ['options' => ['min_range' => 1]]);

if ($nivel_atual_num === false) $nivel_atual_num = 1;

$xp_necessario_calc = (int)ceil(XP_BASE_LEVEL_UP * pow($nivel_atual_num, XP_EXPOENTE_LEVEL_UP));

$xp_necessario_calc = max(XP_BASE_LEVEL_UP, $xp_necessario_calc);

$xp_necessario_display = number_format($xp_necessario_calc);

$xp_atual_num = filter_var($usuario['xp'] ?? 0, FILTER_VALIDATE_INT, ['options' => ['min_range' => 0]]);

if ($xp_atual_num !== false && $xp_necessario_calc > 0) {

$xp_percent = min(100, max(0, ($xp_atual_num / $xp_necessario_calc) * 100));

} else {

$xp_percent = 0;

}

}





$nome_arquivo_foto = !empty($usuario['foto']) ? $usuario['foto'] : 'default.jpg';

$caminho_web_foto = 'uploads/' . htmlspecialchars($nome_arquivo_foto);

$hp_atual_base = (int)($usuario['hp'] ?? 0);

$ki_atual_base = (int)($usuario['ki'] ?? 0);

$pode_entrar_templo_base = ($hp_atual_base > 0 && $ki_atual_base > 0);

$mensagem_bloqueio_templo_base = 'Você precisa recuperar seu HP e Ki base (fora da sala) antes de poder entrar no Templo!';





if (function_exists('formatarNomeUsuarioComTag')) {



$nome_formatado_usuario = formatarNomeUsuarioComTag($conn, $usuario);

} else {



$nome_formatado_usuario = htmlspecialchars($usuario['nome'] ?? 'ErroFunc');

error_log("FATAL: Função formatarNomeUsuarioComTag não definida em praca.php para user $id - Verifique include('script/sala_functions.php')");

}



if (!function_exists('formatNumber')) {

function formatNumber($num) {

return number_format($num ?? 0, 0, ',', '.');

}

}





?>

<!DOCTYPE html>

<html lang="pt-br">

<head>

<meta charset="UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>Pagina Inicial - <?= htmlspecialchars($usuario['nome'] ?? 'Jogador') ?></title>

<link rel="preconnect" href="https://fonts.googleapis.com">

<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

<style>

:root { --bg-image-url: url('https://c4.wallpaperflare.com/wallpaper/870/538/510/dragon-ball-dragon-ball-z-west-city-hd-wallpaper-preview.jpg'); --panel-bg: rgba(25, 28, 36, 0.88); --panel-border: rgba(255, 255, 255, 0.1); --text-primary: #e0e0e0; --text-secondary: #a0a0a0; --accent-color-1: #00e676; --accent-color-2: #ffab00; --accent-color-3: #2979ff; --danger-color: #ff5252; --disabled-color: #555e6d; --border-radius: 12px; --shadow: 0 6px 20px rgba(0, 0, 0, 0.4); } * { margin: 0; padding: 0; box-sizing: border-box; } body { background-image: var(--bg-image-url); background-size: cover; background-position: center; background-attachment: fixed; color: var(--text-primary); font-family: 'Roboto', sans-serif; margin: 0; padding: 25px; min-height: 100vh; background-color: #111; } .feedback-container { width: 100%; max-width: 900px; margin: 0 auto 25px auto; padding: 15px 25px; background-color: rgba(30, 34, 44, 0.92); border-radius: var(--border-radius); box-shadow: var(--shadow); text-align: center; font-weight: 500; font-size: 1rem; line-height: 1.6; border: 1px solid var(--panel-border); color: var(--accent-color-2); display: <?php echo !empty($mensagem_final_feedback) ? 'block' : 'none'; ?>; } .feedback-container strong { color: var(--accent-color-1); } .feedback-container span[style*='lightgreen'] { color: var(--accent-color-1); font-weight: bold; } .feedback-container .error-message, .feedback-container .error { color: var(--danger-color) !important; font-weight: bold; }

/* Main container for layout */

.container { width: 100%; max-width: 1400px; display: flex; justify-content: center; gap: 25px; align-items: flex-start; margin-left: auto; margin-right: auto; }

/* Base styles for all columns */

.coluna { background-color: var(--panel-bg); border-radius: var(--border-radius); padding: 25px; box-shadow: var(--shadow); border: 1px solid var(--panel-border); backdrop-filter: blur(5px); }



/* Left Column */

.coluna-esquerda { width: 26%; min-width: 280px; text-align: center; display: flex; flex-direction: column; gap: 15px; } /* Removed align-self: stretch */

.player-card { margin-bottom: 8px; }

.foto { width: 130px; height: 130px; border-radius: 50%; object-fit: cover; border: 4px solid var(--accent-color-1); margin-bottom: 12px; box-shadow: 0 0 15px rgba(0, 230, 118, 0.5); }

.player-name { font-size: 1.4rem; font-weight: 700; color: #fff; margin-bottom: 2px; word-wrap: break-word; }

.player-level { font-size: 1.05rem; font-weight: 500; color: var(--accent-color-1); margin-bottom: 4px; }

.player-race { font-size: 0.85rem; font-weight: 500; color: var(--text-secondary); margin-bottom: 4px; }

.player-rank { font-size: 0.85rem; font-weight: 500; color: var(--accent-color-3); margin-bottom: 12px; }

.zeni-display { font-size: 1rem; color: var(--accent-color-2); font-weight: 700; margin-bottom: 8px; }

.xp-bar-container { width: 100%; margin-bottom: 12px; }

.xp-label { font-size: 0.75rem; color: var(--text-secondary); text-align: left; margin-bottom: 4px; display: block; }

.xp-bar { height: 11px; background-color: rgba(0, 0, 0, 0.3); border-radius: 6px; overflow: hidden; position: relative; border: 1px solid rgba(255,255,255,0.1); }

.xp-bar-fill { height: 100%; background: linear-gradient(90deg, var(--accent-color-3), var(--accent-color-1)); border-radius: 6px; transition: width 0.5s ease-in-out; }

.xp-text { position: absolute; top: -1px; left: 0; right: 0; font-size: 0.65rem; font-weight: 500; color: #fff; text-shadow: 1px 1px 2px rgba(0,0,0,0.7); line-height: 13px; text-align: center; }

.stats-grid { display: grid; grid-template-columns: auto 1fr; gap: 6px 12px; text-align: left; font-size: 0.85rem; width: 100%; }

.stats-grid strong { color: var(--text-secondary); font-weight: 500; font-size: 0.8rem;}

.stats-grid span { color: var(--text-primary); font-weight: 500; text-align: right; font-size: 0.85rem;}

.divider { height: 1px; background-color: var(--panel-border); border: none; margin: 12px 0; }

.btn-pontos { display: inline-block; padding: 8px 15px; background: linear-gradient(45deg, var(--accent-color-2), #ffc107); color: #111; text-decoration: none; font-weight: 700; font-size: 0.9rem; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); margin-bottom: 8px; border: none; text-align: center; transition: all 0.2s ease; cursor: pointer; } .btn-pontos a { color: inherit; text-decoration: none; }

.btn-pontos:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4); filter: brightness(1.1); }

.action-button { display: block; width: 100%; padding: 10px 15px; border: none; border-radius: 8px; font-size: 0.85rem; font-weight: 500; text-decoration: none; text-align: center; cursor: pointer; transition: background-color 0.2s ease, transform 0.1s ease; }

.action-button:hover { transform: scale(1.02); } .btn-perfil { background-color: var(--accent-color-1); color: #111; } .btn-perfil:hover { background-color: #00cf68; } .btn-logout { background-color: var(--danger-color); color: #fff; margin-top: auto; } .btn-logout:hover { background-color: #ff3d3d; }



/* Wrapper for Center Column and Chat Column */

.coluna-centro-wrapper {

width: 48%;

display: flex;

flex-direction: column;

gap: 25px; /* Space between central content and chat */

/* No max-height or overflow here */

}



/* Center Column (Content) */

.coluna-central {

/* Inherits .coluna styles */

width: 100%;

color: var(--text-primary);

line-height: 1.7;

font-size: 0.95rem;

max-height: 45vh; /* <<< ADJUSTED: Limit max height */

overflow-y: auto; /* <<< ADDED: Enable scrolling for this column */

/* Scrollbar styling for central column */

}

.coluna-central::-webkit-scrollbar { width: 8px; }

.coluna-central::-webkit-scrollbar-track { background: rgba(0,0,0,0.1); border-radius: 4px;}

.coluna-central::-webkit-scrollbar-thumb { background-color: rgba(255, 255, 255, 0.2); border-radius: 4px; border: 1px solid rgba(0,0,0,0.2); }

.coluna-central::-webkit-scrollbar-thumb:hover { background-color: rgba(255, 255, 255, 0.3); }

/* --- End scrollbar styling --- */

.coluna-central h1 { text-align: center; color: #fff; font-weight: 700; font-size: 1.8rem; margin-bottom: 25px; }

.coluna-central h2 { color: var(--accent-color-1); font-weight: 700; font-size: 1.2rem; margin-top: 20px; margin-bottom: 10px; padding-bottom: 5px; border-bottom: 2px solid var(--accent-color-1); }

.coluna-central h2:first-of-type { margin-top: 0; }

.coluna-central ul { list-style: none; padding-left: 0; margin-bottom: 15px; }

.coluna-central li { margin-bottom: 10px; position: relative; padding-left: 20px; }

.coluna-central li::before { content: '⚡'; color: var(--accent-color-2); position: absolute; left: 0; top: 2px; font-size: 0.9em; }

.coluna-central p { margin-bottom: 10px; color: var(--text-secondary); }

.coluna-central b { color: var(--text-primary); font-weight: 500; }



/* Chat Column Below Center */

.coluna-chat-inferior {

/* Inherits .coluna styles */

width: 100%;

padding-top: 15px; /* Slightly less padding top */

padding-bottom: 15px; /* Slightly less padding bottom */

}

.coluna-chat-inferior h3 {

font-size: 1rem; color: var(--accent-color-3); margin-bottom: 10px; margin-top: 0; text-align: left; border-bottom: 1px solid var(--panel-border); padding-bottom: 5px;

}



/* Chat styles (apply inside .coluna-chat-inferior) */

.chat-container-ajax {

width: 100%;

margin-top: 0; /* Removed top margin */

border: 1px solid var(--panel-border);

border-radius: var(--border-radius);

background-color: rgba(0,0,0,0.2);

display: flex;

flex-direction: column;

/* Removed fixed height, use max-height on inner div */

}

.chat-messages-display {

flex-grow: 1;

overflow-y: auto;

padding: 10px;

display: flex;

flex-direction: column;

gap: 8px;

max-height: 250px; /* <<< ADJUSTED: Limit chat message area height */

min-height: 100px; /* Optional: ensure it has some height even when empty */

}

.chat-messages-display::-webkit-scrollbar { width: 8px; }

.chat-messages-display::-webkit-scrollbar-track { background: rgba(0,0,0,0.1); border-radius: 4px;}

.chat-messages-display::-webkit-scrollbar-thumb { background-color: rgba(255, 255, 255, 0.2); border-radius: 4px; border: 1px solid rgba(0,0,0,0.2); }

.chat-messages-display::-webkit-scrollbar-thumb:hover { background-color: rgba(255, 255, 255, 0.4); }

.chat-message-ajax { max-width: 85%; padding: 6px 10px; border-radius: 10px; line-height: 1.4; font-size: 0.85rem; word-wrap: break-word; background-color: rgba(255, 255, 255, 0.08); align-self: flex-start; border-bottom-left-radius: 2px; }

.chat-message-ajax.mine { background-color: rgba(41, 121, 255, 0.3); align-self: flex-end; border-bottom-right-radius: 2px; border-bottom-left-radius: 10px; }

.chat-message-ajax .sender { font-weight: 700; font-size: 0.7rem; color: var(--accent-color-1); display: block; margin-bottom: 2px; }

.chat-message-ajax .sender small { font-size: 0.8em; color: var(--text-secondary); font-weight: 400; margin-left: 5px; }

.chat-message-ajax .msg-text { color: var(--text-primary); }

.chat-input-area { display: flex; padding: 8px; border-top: 1px solid var(--panel-border); background-color: rgba(0,0,0,0.2); }

.chat-input-area input[type="text"] { flex-grow: 1; padding: 8px 10px; border: 1px solid var(--panel-border); border-radius: 15px 0 0 15px; background-color: rgba(0,0,0,0.3); color: var(--text-primary); font-size: 0.85rem; outline: none; }

.chat-input-area button { padding: 8px 12px; border: none; background-color: var(--accent-color-3); color: white; border-radius: 0 15px 15px 0; cursor: pointer; font-weight: 500; font-size: 0.85rem; transition: background-color 0.2s ease; }

.chat-input-area button:hover { background-color: #216ae1; } .chat-loading, .chat-empty, .chat-error { text-align: center; color: var(--text-secondary); padding: 20px; font-style: italic; font-size: 0.9rem;}



/* Right Column */

.coluna-direita { width: 26%; min-width: 250px; padding: 15px; display: flex; flex-direction: column; gap: 10px; } /* Removed align-self: stretch */

.nav-button { display: block; padding: 14px 20px; background-color: rgba(45, 52, 66, 0.8); color: var(--text-primary); text-decoration: none; text-align: center; border-radius: 8px; border: 1px solid rgba(255, 255, 255, 0.1); font-size: 0.95rem; font-weight: 500; transition: all 0.2s ease; position: relative; overflow: hidden; } .nav-button:hover { background-color: rgba(55, 62, 76, 0.9); border-color: rgba(255, 255, 255, 0.2); color: #fff; transform: translateY(-2px); } .nav-button::before { content: ''; position: absolute; top: 0; left: -75%; width: 50%; height: 100%; background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0) 100%); transform: skewX(-25deg); transition: left 0.6s ease; } .nav-button:hover::before { left: 125%; } .nav-button.disabled { background-color: var(--disabled-color); color: #8894a8; cursor: not-allowed; border-color: rgba(0, 0, 0, 0.2); opacity: 0.7; } .nav-button.disabled:hover { background-color: var(--disabled-color); transform: none; border-color: rgba(0, 0, 0, 0.2); color: #8894a8; } .nav-button.disabled::before { display: none; } .nav-button.logout { background-color: rgba(192, 57, 43, 0.8); border-color: rgba(255, 255, 255, 0.1); color: #fff; margin-top: auto; /* Pushes logout to bottom */ } .nav-button.logout:hover { background-color: rgba(231, 76, 60, 0.9); border-color: rgba(255, 255, 255, 0.2); }



/* Bottom Navigation (Mobile) */

#bottom-nav { display: none; }



/* Responsive Adjustments */

@media (max-width: 1200px) {

body { padding: 15px; }

.container {

flex-direction: column; align-items: center; width: 100%; padding: 0; gap: 15px;

}

.coluna, .coluna-centro-wrapper, .coluna-esquerda, .coluna-direita, .coluna-chat-inferior {

width: 100% !important; max-width: 700px; margin-bottom: 0; min-width: unset;

}

.coluna-central { max-height: none; overflow-y: visible; } /* Remove height limit on mobile */

.chat-messages-display { max-height: 250px; } /* Keep chat limit or adjust for mobile */

.coluna-direita { margin-bottom: 15px; }

.nav-button.logout { margin-top: 10px; }

}

@media (max-width: 768px) {

body { padding: 10px; padding-bottom: 75px; }

.feedback-container { font-size: 0.9rem; padding: 10px 15px; margin: 0 auto 10px auto;}

.coluna-direita { display: none; }

/* .coluna-chat-inferior { order: 3; } */ /* Probably not needed */

#bottom-nav {

display: flex; position: fixed; bottom: 0; left: 0; right: 0; background-color: rgba(20, 23, 31, 0.97); border-top: 1px solid var(--panel-border); padding: 2px 0; box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.35); justify-content: space-around; align-items: stretch; z-index: 1000; backdrop-filter: blur(6px); height: 60px;

}

.bottom-nav-item {

display: flex; flex-direction: column; align-items: center; justify-content: center; flex-grow: 1; text-decoration: none; color: var(--text-secondary); padding: 4px 2px; font-size: 0.65rem; text-align: center; transition: background-color 0.2s ease, color 0.2s ease; cursor: pointer; border-radius: 5px; margin: 2px; line-height: 1.2;

}

.bottom-nav-item:not(.active):not(.disabled):hover {

background-color: rgba(255, 255, 255, 0.05); color: var(--text-primary);

}

.bottom-nav-item.active {

color: var(--accent-color-1); font-weight: bold; background-color: rgba(0, 230, 118, 0.1);

}

.bottom-nav-item span:first-child {

font-size: 1.5rem; line-height: 1; margin-bottom: 4px;

}

.coluna { padding: 15px; }

.foto { width: 100px; height: 100px; }

.player-name { font-size: 1.2rem; }

.player-level { font-size: 0.95rem; }

.stats-grid { font-size: 0.8rem; }

.btn-pontos { font-size: 0.85rem; }

.coluna-central h1 { font-size: 1.4rem; }

.coluna-central h2 { font-size: 1.1rem; }

.coluna-chat-inferior h3 { font-size: 1.0rem; }

.coluna-central p, .coluna-central li { font-size: 0.85rem; }

.action-button { font-size: 0.85rem; padding: 10px 12px;}

/* .chat-container-ajax { height: auto; } */ /* Let inner max-height control */

.chat-messages-display { max-height: 200px; } /* Adjust chat height */

.bottom-nav-item.disabled { cursor: not-allowed; opacity: 0.5; color: #6a7383 !important; background-color: transparent !important; }

.bottom-nav-item.disabled:hover { color: #6a7383 !important; }

.chat-message-ajax { font-size: 0.8rem; }

}

@media (max-width: 480px) {

body { padding: 8px; padding-bottom: 70px; }

.container { gap: 10px; }

.coluna-centro-wrapper { gap: 10px; }

.coluna { padding: 12px; }

.foto { width: 80px; height: 80px; border-width: 3px;}

.player-name { font-size: 1.0rem; }

.player-level { font-size: 0.85rem; }

.player-race, .player-rank { font-size: 0.75rem; }

.zeni-display { font-size: 0.9rem; }

.xp-bar-container { margin-bottom: 8px;}

.xp-label { font-size: 0.7rem;}

.xp-bar { height: 9px;}

.xp-text { font-size: 0.6rem; line-height: 11px;}

.stats-grid { font-size: 0.75rem; gap: 4px 8px; }

.stats-grid strong { font-weight: 400; font-size: 0.7rem;}

.stats-grid span { font-size: 0.75rem;}

.btn-pontos { font-size: 0.8rem; padding: 7px 12px;}

.action-button { font-size: 0.8rem; padding: 9px 10px;}

.coluna-central h1 { font-size: 1.2rem; }

.coluna-central h2 { font-size: 1.0rem; }

.coluna-chat-inferior h3 { font-size: 0.9rem; }

.coluna-central p, .coluna-central li, .chat-message-ajax { font-size: 0.8rem; }

#bottom-nav { height: 55px; }

.bottom-nav-item span:first-child { font-size: 1.2rem; }

.bottom-nav-item span:last-child { font-size: 0.6rem; }

.feedback-container { font-size: 0.85rem; padding: 8px 12px; margin: 0 auto 8px auto;}

.chat-messages-display { max-height: 160px; } /* Adjust chat height */

}

</style>

</head>

<body>



<?php if (!empty($mensagem_final_feedback)): ?>

<div class="feedback-container"><?= nl2br($mensagem_final_feedback) ?></div>

<?php endif; ?>



<div class="container">

<div class="coluna coluna-esquerda">

<div class="player-card">

<img class="foto" src="<?= $caminho_web_foto ?>" alt="Foto de <?= htmlspecialchars($usuario['nome'] ?? '') ?>">

<div class="player-name"><?= $nome_formatado_usuario ?></div>

<div class="player-level">Nível <?= htmlspecialchars($usuario['nivel'] ?? '?') ?></div>

<div class="player-race">Raça: <?= htmlspecialchars($usuario['raca'] ?? 'N/D') ?></div>

<div class="player-rank">Título: <?= htmlspecialchars($usuario['ranking_titulo'] ?? 'Iniciante') ?></div>

</div>

<div class="zeni-display">💰 Zeni: <?= formatNumber($usuario['zeni'] ?? 0) ?></div>



<div class="xp-bar-container">

<span class="xp-label">Experiência</span>

<div class="xp-bar">

<div class="xp-bar-fill" style="width: <?= $xp_percent ?>%;"></div>

<div class="xp-text"><?= formatNumber($usuario['xp'] ?? 0) ?> / <?= $xp_necessario_display ?></div>

</div>

</div>



<?php $pontos_num = filter_var($usuario['pontos'] ?? 0, FILTER_VALIDATE_INT); ?>

<?php if ($pontos_num > 0 && $currentPage !== 'perfil.php' && $currentPage !== 'urunai.php'): ?>

<a href="perfil.php" class="btn-pontos" style="cursor: pointer; text-decoration: none;">

<?= number_format($pontos_num) ?> Pontos Disponíveis!

<span style="font-size: 0.8em;">(Distribuir)</span>

</a>

<?php elseif($pontos_num > 0): ?>

<div class="btn-pontos" style="cursor: default;"><?= number_format($pontos_num) ?> Pontos para Distribuir</div>

<?php endif; ?>



<div class="stats-grid">

<strong>HP Base</strong><span><?= formatNumber($usuario['hp'] ?? 0) ?></span>

<strong>Ki Base</strong><span><?= formatNumber($usuario['ki'] ?? 0) ?></span>

<strong>Força</strong><span><?= formatNumber($usuario['forca'] ?? 0) ?></span>

<strong>Defesa</strong><span><?= formatNumber($usuario['defesa'] ?? 0) ?></span>

<strong>Velocidade</strong><span><?= formatNumber($usuario['velocidade'] ?? 0) ?></span>

<strong>Pontos</strong><span style="color: var(--accent-color-2); font-weight:700;"><?= formatNumber($usuario['pontos'] ?? 0) ?></span>

<strong>Rank (Nível)</strong><span style="color: var(--accent-color-1); font-weight:700;"><?= htmlspecialchars($rank_nivel) ?><?= ($rank_nivel !== 'N/A' ? 'º' : '') ?></span>

<strong>Rank (Sala)</strong><span style="color: var(--accent-color-1); font-weight:700;"><?= htmlspecialchars($rank_sala) ?><?= ($rank_sala !== 'N/A' ? 'º' : '') ?></span>

</div>

<div class="divider"></div>

<div class="stats-grid" style="font-size: 0.85rem;">

<strong>ID</strong><span><?= htmlspecialchars($usuario['id'] ?? 'N/A') ?></span>

<strong>Tempo Sala</strong><span><?= formatNumber($usuario['tempo_sala'] ?? 0) ?> min</span>

</div>



<div style="margin-top: auto; padding-top: 15px; display: flex; flex-direction: column; gap: 10px;"> <a class="action-button btn-perfil" href="perfil.php">Editar Perfil</a> <a class="action-button btn-logout" href="sair.php">Sair (Logout)</a> </div>

</div>



<div class="coluna-centro-wrapper">

<div class="coluna coluna-central">

<h1>Bem-vindo(a) de volta, <?= explode(' ', $nome_formatado_usuario)[0] ?>!</h1>

<?php

$notas_file = 'notas_atualizacao.html';

if (file_exists($notas_file)) { include($notas_file); }

else { echo "<h2>Notas da Versão</h2><p>Não foi possível carregar as notas da versão.</p>"; }

?>

<hr class="divider" style="margin: 20px 0;">

<h2>Detalhes Importantes</h2>

<ul>

<li><b>Level Up:</b> Ao ganhar XP suficiente, você subirá de nível e receberá <b><?= PONTOS_GANHO_POR_NIVEL ?> pontos</b>. Vá em "Editar Perfil" para distribuí-los!</li>

<li><b>Sala do Templo:</b> Ações resetam o timer de inatividade (15 min).

<?php if (!$pode_entrar_templo_base): ?>

<span style="color: var(--danger-color); font-weight: bold;"> (Acesso bloqueado: <?= htmlspecialchars($mensagem_bloqueio_templo_base) ?>)</span>

<?php endif; ?>

</li>

<li><b>Habilidades (Kame):</b> Fique atento aos requisitos para desbloquear novas técnicas.</li>

<li><b>Chat/Desafios Praça:</b> Mensagens e notificações podem ter um pequeno atraso (atualização periódica).</li>

<li><b>PvP:</b> Aceitar um desafio te levará para a Arena (combate ainda em desenvolvimento).</li>

<li><b>Arena Royalle:</b> Verifique a seção na Praça para registrar-se ou ver arenas ativas.</li>

</ul>

<hr class="divider" style="margin: 20px 0;">

<h2>Próximos Passos</h2>

<ul>

<li>Implementação do combate na Arena PvP.</li>

<li>Ranking de jogadores.</li>

<li>Sistema de Aventuras/Missões.</li>

<li>Loja e Inventário.</li>

<li>Mais Habilidades e Transformações.</li>

<li>Balanceamento geral.</li>

</ul>

</div> <div class="coluna coluna-chat-inferior">

<h3>Chat da Praça</h3>

<div class="chat-container-ajax">

<div id="chat-messages-ajax" class="chat-messages-display">

<?php if (!empty($chat_history)): ?>

<?php foreach ($chat_history as $msg): ?>

<div class="chat-message-ajax <?= $msg['user_id'] == $id ? 'mine' : 'other' ?>"> <span class="sender"><?= htmlspecialchars($msg['username']) ?> <small>(<?= date('H:i', strtotime($msg['timestamp'])) ?>)</small></span> <span class="msg-text"><?= htmlspecialchars($msg['message_text']) ?></span> </div>

<?php endforeach; ?>

<?php else: ?>

<p class="chat-empty">Nenhuma mensagem recente.</p>

<?php endif; ?>

</div>

<form id="chat-form-ajax" class="chat-input-area">

<input type="text" id="chat-message-input" placeholder="Digite sua mensagem..." autocomplete="off" required maxlength="500">

<button type="submit">Enviar</button>

</form>

</div>

</div> </div> <div class="coluna coluna-direita">

<a class="nav-button" href="home.php">Página Inicial</a>

<?php $classe_templo_nav_dir = ''; $onclick_templo_nav_dir = ''; $href_templo_nav_dir = '#'; $url_destino_templo_nav_dir = 'templo.php'; $title_templo_nav_dir = ''; if (!$pode_entrar_templo_base) { $classe_templo_nav_dir = ' disabled'; $onclick_templo_nav_dir = ' onclick="alert(\'' . htmlspecialchars($mensagem_bloqueio_templo_base) . '\'); return false;"'; $title_templo_nav_dir = 'HP ou Ki base estão em 0'; } else { $href_templo_nav_dir = htmlspecialchars($url_destino_templo_nav_dir); $title_templo_nav_dir = 'Entrar na Sala do Templo'; } ?>

<a class="nav-button<?= $classe_templo_nav_dir ?>" href="<?= $href_templo_nav_dir ?>" title="<?= htmlspecialchars($title_templo_nav_dir) ?>" <?= $onclick_templo_nav_dir ?>> Sala do Templo </a>

<a class="nav-button" href="urunai.php">Urunai</a>

<a class="nav-button" href="kame.php">Mestre Kame</a>

<a class="nav-button" href="perfil.php" style="background-color: rgba(0, 230, 118, 0.2); border-color: var(--accent-color-1);">Editar Perfil</a>

<a class="nav-button" href="praca.php" style="background-color: rgba(41, 121, 255, 0.3); border-color: var(--accent-color-3);">Praça Central</a>

<a class="nav-button" href="desafios/treinos.php">Treinos</a>

<a class="nav-button disabled" href="#" title="Em Desenvolvimento">Sala do Tempo</a>

<a class="nav-button disabled" href="#" title="Em Desenvolvimento">Ranking</a>

<a class="nav-button disabled" href="#" title="Em Desenvolvimento">Habilidades</a>

<a class="nav-button disabled" href="#" title="Em Desenvolvimento">Aventuras</a>

<a class="nav-button disabled" href="#" title="Em Desenvolvimento">Loja</a>

<a class="nav-button disabled" href="#" title="Em Desenvolvimento">Inventário</a>

<a class="nav-button disabled" href="#" title="Em Desenvolvimento">Configurações</a>

<a class="nav-button logout" href="sair.php">Sair</a>

</div>



</div> <nav id="bottom-nav">

<?php $navItems = [ ['label' => 'Treinos', 'href' => 'desafios/treinos.php', 'icon' => '💪'], ['label' => 'Praça', 'href' => 'praca.php', 'icon' => '👥'], ['label' => 'Templo', 'href' => 'templo.php', 'icon' => '🏛️'], ['label' => 'Kame', 'href' => 'kame.php', 'icon' => '🐢'], ['label' => 'Perfil', 'href' => 'perfil.php', 'icon' => '👤'] ]; $foundArena = false; foreach($navItems as $item) { if ($item['href'] === 'arena.php' || $item['href'] === 'arena/arenaroyalle.php') { $foundArena = true; break; } } if (!$foundArena) { $navItems[] = ['label' => 'Arena', 'href' => 'arena/arenaroyalle.php', 'icon' => '⚔️']; } ?>

<?php foreach ($navItems as $item): ?>

<?php $url_destino_item = $item['href']; $final_href = ''; $final_onclick = ''; $final_title = ''; $extra_class = ''; $is_temple_button = ($item['label'] === 'Templo'); $is_current_page = ($currentPage == basename($item['href'])); $final_href = htmlspecialchars($url_destino_item); $final_title = 'Ir para ' . htmlspecialchars($item['label']); if ($is_temple_button) { if (!$pode_entrar_templo_base) { $final_href = '#'; $final_onclick = ' onclick="alert(\'' . htmlspecialchars($mensagem_bloqueio_templo_base) . '\'); return false;"'; $final_title = 'HP ou Ki base em 0'; $extra_class = ' disabled'; } else { $final_title = 'Entrar na Sala do Templo'; } } $active_class = ($is_current_page && !($is_temple_button && !$pode_entrar_templo_base)) ? ' active' : ''; echo "<a href='{$final_href}' class='bottom-nav-item{$active_class}{$extra_class}' {$final_onclick} title='" . htmlspecialchars($final_title) . "'>"; echo "<span style='font-size: 1.4rem; line-height: 1; margin-bottom: 3px;'>{$item['icon']}</span>"; echo "<span>" . htmlspecialchars($item['label']) . "</span>"; echo "</a>"; ?>

<?php endforeach; ?>

</nav>



<script>

// --- JavaScript (Chat polling, etc.) permanece o mesmo ---

const chatMessagesDiv = document.getElementById('chat-messages-ajax');

const chatForm = document.getElementById('chat-form-ajax');

const messageInput = document.getElementById('chat-message-input');

// const challengeNotificationsDiv = document.getElementById('challenge-notifications'); // Review if needed

const challengeNotificationsDiv = null;

const currentUserId = <?php echo json_encode($id); ?>;

let lastMessageId = 0;

<?php if(!empty($chat_history)): ?>

lastMessageId = <?= (int)end($chat_history)['id'] ?>;

<?php endif; ?>



function escapeHtml(unsafe) {

if (typeof unsafe !== 'string') return '';

return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");

}



function scrollToBottom() {

if (chatMessagesDiv) {

// Delay slightly to allow DOM update after adding message

setTimeout(() => { chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight; }, 50);

}

}



function addChatMessageToDisplay(msg, isHistory = false) {

if (!chatMessagesDiv) return;

const loadingOrEmpty = chatMessagesDiv.querySelector('.chat-loading, .chat-empty');

if(loadingOrEmpty) loadingOrEmpty.remove();



const messageElement = document.createElement('div');

messageElement.classList.add('chat-message-ajax');

messageElement.classList.add(msg.user_id == currentUserId ? 'mine' : 'other');



let timestampDisplay = msg.timestamp_formatted || '';

if (!timestampDisplay && msg.timestamp) {

try {

// Ensure timestamp is treated correctly (e.g., as UTC if stored that way)

const date = new Date(msg.timestamp.replace(/-/g, '/') + 'Z'); // Assume UTC if timezone not specified

if (!isNaN(date)) {

timestampDisplay = date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', timeZone: 'America/Sao_Paulo' }); // Format for Brazil time

} else {

// Fallback if date parsing fails

timestampDisplay = msg.timestamp.split(' ')[1]?.substring(0, 5) || '';

}

} catch(e){

// Fallback in case of any error

timestampDisplay = msg.timestamp.split(' ')[1]?.substring(0, 5) || '';

}

}



messageElement.innerHTML = `<span class="sender">${escapeHtml(msg.username) || '??'} <small>(${timestampDisplay})</small></span><span class="msg-text">${escapeHtml(msg.message_text) || ''}</span>`;



const shouldScroll = chatMessagesDiv.scrollHeight - chatMessagesDiv.scrollTop <= chatMessagesDiv.clientHeight + 50; // Check if near bottom BEFORE adding



chatMessagesDiv.appendChild(messageElement);



if (!isHistory && shouldScroll) { // Scroll only if user was near the bottom

scrollToBottom();

}



if (msg.id && parseInt(msg.id) > lastMessageId) {

lastMessageId = parseInt(msg.id);

}

}





if (chatForm && messageInput) {

chatForm.addEventListener('submit', async (e) => {

e.preventDefault();

const message = messageInput.value.trim();

if (message) {

messageInput.disabled = true;

const btn = chatForm.querySelector('button');

if(btn) btn.disabled = true;

const formData = new FormData();

formData.append('message', message);

try {

const response = await fetch('chat_handler_ajax.php?action=send', { method: 'POST', body: formData });

const data = await response.json();

if (data.success) {

messageInput.value = '';

// Add the sent message locally immediately for better UX

// Note: timestamp might be slightly off until polling updates it

addChatMessageToDisplay({

user_id: currentUserId,

username: '<?= htmlspecialchars($usuario['nome'] ?? 'Você') ?>', // Use current user's name

message_text: message,

timestamp: new Date().toISOString(), // Use current time as placeholder

timestamp_formatted: new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit'})

});

scrollToBottom(); // Ensure scroll after adding own message



} else {

alert('Erro ao enviar: ' + (data.error || 'Desconhecido'));

}

} catch (error) {

console.error('Erro JS enviar chat:', error);

alert('Erro conexão ao enviar.');

} finally {

messageInput.disabled = false;

if(btn) btn.disabled = false;

messageInput.focus();

}

}

});

}



let isFetchingChat = false;

const pollInterval = 3500; // Slightly increased interval

let pollingIntervalId = null;



async function fetchNewChatMessages() {

if (isFetchingChat || document.hidden) return;



isFetchingChat = true;

try {

const response = await fetch(`chat_handler_ajax.php?action=fetch&last_id=${lastMessageId}`);

if (!response.ok) {

// console.warn('Erro rede chat (fetch):', response.status); // Less aggressive logging

return;

}

const data = await response.json();

if (data.success && data.messages && data.messages.length > 0) {

const isScrolledToBottom = chatMessagesDiv.scrollHeight - chatMessagesDiv.scrollTop <= chatMessagesDiv.clientHeight + 50;

data.messages.forEach(msg => {

// Avoid adding message if it was just added locally from send

if (msg.user_id != currentUserId || !document.querySelector(`.chat-message-ajax.mine .msg-text:last-child`)?.textContent.includes(msg.message_text.substring(0,10))) { // Basic check

addChatMessageToDisplay(msg, false);

}

});

if (isScrolledToBottom) {

scrollToBottom();

}

} else if (!data.success && data.error) {

console.error('Erro API chat (fetch):', data.error);

}

} catch (error) {

// console.error('Erro JS chat (fetch):', error); // Less aggressive logging

} finally {

isFetchingChat = false;

}

}



function pollForUpdates() {

fetchNewChatMessages();

}



// --- PvP Challenge Functions ---

async function sendChallenge(buttonElement) { /* ... unchanged ... */ }

function displayChallengeNotification(challenge) { /* ... unchanged ... */ }

async function respondChallenge(challengeId, responseAction, buttonElement) { /* ... unchanged ... */ }

// --- End PvP Challenge Functions ---



document.addEventListener('DOMContentLoaded', () => {

scrollToBottom();

if (pollingIntervalId) clearInterval(pollingIntervalId);

pollingIntervalId = setInterval(pollForUpdates, pollInterval);



document.addEventListener("visibilitychange", () => {

if (document.hidden) {

if (pollingIntervalId) clearInterval(pollingIntervalId);

pollingIntervalId = null;

} else {

if (!pollingIntervalId) {

// Fetch immediately when tab becomes visible again

// Add a small delay to allow potential pending operations

setTimeout(pollForUpdates, 200);

pollingIntervalId = setInterval(pollForUpdates, pollInterval);

}

}

});

});

</script>



</body>

</html>

<?php

$conn = null;

?>