<?php

ini_set('display_errors', 1);
error_reporting(E_ALL);
session_start();
// Ajuste o caminho para login.php se este arquivo não estiver na raiz
if (!isset($_SESSION['user_id'])) { header("Location: login.php"); exit(); }

require_once('conexao.php');
if (file_exists('script/sala_functions.php')) {
    require_once('script/sala_functions.php');
}

// --- Variáveis e Configurações ---
$id = $_SESSION['user_id']; $id_usuario_logado = $id; $usuario = null; $initial_notifications = []; $chat_history = [];
$mensagem_final_feedback = ""; $currentPage = basename(__FILE__); $nome_formatado_usuario = 'ErroNome'; $rank_nivel = 'N/A'; $rank_sala = 'N/A'; $online_users_count = 0; $online_admins = []; $notification_limit = 20; $chat_history_limit = 5;
if (!defined('XP_BASE_LEVEL_UP')) define('XP_BASE_LEVEL_UP', 1000); if (!defined('XP_EXPOENTE_LEVEL_UP')) define('XP_EXPOENTE_LEVEL_UP', 1.5); if (!defined('PONTOS_GANHO_POR_NIVEL')) define('PONTOS_GANHO_POR_NIVEL', 100);
if (isset($_SESSION['feedback_wali'])) { $mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . $_SESSION['feedback_wali']; unset($_SESSION['feedback_wali']); } if (isset($_SESSION['feedback_geral'])) { $mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . $_SESSION['feedback_geral']; unset($_SESSION['feedback_geral']); } if (isset($_SESSION['feedback_cooldown'])) { $mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . $_SESSION['feedback_cooldown']; unset($_SESSION['feedback_cooldown']); }
function verificarLevelUpHome(PDO $pdo_conn, int $id_usuario): array { $mensagens_level_up = []; $tentativas = 0; $max_tentativas = 50; while ($tentativas < $max_tentativas) { $tentativas++; try { $stmt_select = $pdo_conn->prepare("SELECT nivel, xp, pontos FROM usuarios WHERE id = :id_usuario"); $stmt_select->execute([':id_usuario' => $id_usuario]); $user_data = $stmt_select->fetch(PDO::FETCH_ASSOC); if (!$user_data) { error_log("Usuário {$id_usuario} não encontrado LUP (verificarLevelUpHome)."); break; } $nivel_atual = (int)$user_data['nivel']; $xp_atual = (int)$user_data['xp']; $pontos_atuais = (int)($user_data['pontos'] ?? 0); $xp_necessario = max(XP_BASE_LEVEL_UP, (int)ceil(XP_BASE_LEVEL_UP * pow($nivel_atual, XP_EXPOENTE_LEVEL_UP))); if ($xp_atual >= $xp_necessario) { $novo_nivel = $nivel_atual + 1; $novo_xp = $xp_atual - $xp_necessario; $novos_pontos = $pontos_atuais + PONTOS_GANHO_POR_NIVEL; $stmt_update = $pdo_conn->prepare("UPDATE usuarios SET nivel = :nivel, xp = :xp, pontos = :pontos WHERE id = :id_usuario"); $update_params = [ ':nivel' => $novo_nivel, ':xp' => $novo_xp, ':pontos' => $novos_pontos, ':id_usuario' => $id_usuario ]; if ($stmt_update->execute($update_params)) { $mensagens_level_up[] = "<span class='levelup-message'>⭐ LEVEL UP! ⭐ Nível <strong>{$novo_nivel}</strong>! +<strong>".PONTOS_GANHO_POR_NIVEL."</strong> Pontos!</span>"; error_log("User {$id_usuario} LUP Nível {$novo_nivel}. Pontos: {$novos_pontos}"); continue; } else { error_log("Falha PDO UPDATE LUP user {$id_usuario}: " . print_r($stmt_update->errorInfo(), true)); break; } } else { break; } } catch (PDOException $e) { error_log("PDOException LUP user {$id_usuario}: " . $e->getMessage()); break; } } if ($tentativas >= $max_tentativas) { error_log("Alerta: Loop LUP user {$id_usuario} atingiu limite {$max_tentativas}."); } return $mensagens_level_up; }
$destinatarioEmail = "fehlimaxd@hotmail.com"; $remetenteEmail = "noreply@" . ($_SERVER['HTTP_HOST'] ?? 'seudominio.com');
try { if (!isset($conn) || !$conn instanceof PDO) { if (isset($pdo) && $pdo instanceof PDO) { $conn = $pdo;} else { throw new Exception("Conexão PDO não está disponível."); } }
    if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['errorDescription'])) { if (isset($_POST['userId'], $_POST['userName'], $_POST['userLevel'], $_POST['errorLocation'], $_POST['errorDescription']) && !empty(trim($_POST['userName'])) && !empty(trim($_POST['errorLocation'])) && !empty(trim($_POST['errorDescription'])) ) { $postedUserId = htmlspecialchars(trim($_POST['userId']), ENT_QUOTES, 'UTF-8'); $postedUserName = htmlspecialchars(trim($_POST['userName']), ENT_QUOTES, 'UTF-8'); $postedUserLevel = htmlspecialchars(trim($_POST['userLevel']), ENT_QUOTES, 'UTF-8'); $errorLocation = htmlspecialchars(trim($_POST['errorLocation']), ENT_QUOTES, 'UTF-8'); $errorDescription = htmlspecialchars(trim($_POST['errorDescription']), ENT_QUOTES, 'UTF-8'); $assunto = "Novo Relatório de Bug (Goku House) - Usuário: " . $postedUserName; $corpoEmail = "Relatório de Bug Recebido:\n\n----------------------------------------\nID Usuário: " . $postedUserId . "\nNome: " . $postedUserName . "\nNível: " . $postedUserLevel . "\n----------------------------------------\nLocal do Erro:\n" . $errorLocation . "\n\nDescrição:\n" . $errorDescription . "\n----------------------------------------\nData/Hora: " . date("d/m/Y H:i:s") . "\nIP: " . ($_SERVER['REMOTE_ADDR'] ?? 'N/A') . "\n"; $headers = "From: Goku House Report <" . $remetenteEmail . ">\r\n"; $headers .= "Reply-To: " . $remetenteEmail . "\r\n"; $headers .= "Content-Type: text/plain; charset=UTF-8\r\n"; $headers .= "X-Mailer: PHP/" . phpversion(); if (@mail($destinatarioEmail, $assunto, $corpoEmail, $headers)) { $_SESSION['form_status'] = 'success'; $_SESSION['form_user_name'] = $postedUserName; } else { error_log("Falha ao enviar email de report de bug."); $_SESSION['form_status'] = 'error'; $_SESSION['form_user_name'] = $postedUserName; } } else { $_SESSION['form_status'] = 'invalid'; $_SESSION['form_user_name'] = $_POST['userName'] ?? 'Guerreiro(a)'; } header("Location: " . basename(__FILE__)); exit; }
    $form_status = $_SESSION['form_status'] ?? null; $form_user_name = $_SESSION['form_user_name'] ?? null; unset($_SESSION['form_status'], $_SESSION['form_user_name']);
    $sql_usuario = "SELECT nome, nivel, hp, pontos, xp, ki, forca, id, defesa, velocidade, foto, tempo_sala, raca, zeni, ranking_titulo FROM usuarios WHERE id = :id_usuario"; $stmt_usuario = $conn->prepare($sql_usuario); $stmt_usuario->execute([':id_usuario' => $id]); $usuario = $stmt_usuario->fetch(PDO::FETCH_ASSOC); if (!$usuario) { session_destroy(); header("Location: login.php?erro=UsuarioNaoEncontradoFatal"); exit(); } $mensagens_level_up_detectado = verificarLevelUpHome($conn, $id); if (!empty($mensagens_level_up_detectado)) { $mensagem_final_feedback .= (!empty($mensagem_final_feedback) ? "<br>" : "") . implode("<br>", $mensagens_level_up_detectado); $stmt_usuario->execute([':id_usuario' => $id]); $usuario = $stmt_usuario->fetch(PDO::FETCH_ASSOC); if (!$usuario) { throw new PDOException("Falha recarregar dados pós-LUP user {$id} (merged code)."); } error_log("User {$id} dados recarregados pós LUP (merged code)."); }
    try { $sql_rank_nivel = "SELECT rank_nivel FROM (SELECT id, ROW_NUMBER() OVER (ORDER BY nivel DESC, xp DESC, tempo_sala DESC) as rank_nivel FROM usuarios) AS ranked_by_level WHERE id = :user_id"; $stmt_rank_nivel = $conn->prepare($sql_rank_nivel); $stmt_rank_nivel->execute([':user_id' => $id]); $result_nivel = $stmt_rank_nivel->fetch(PDO::FETCH_ASSOC); if ($result_nivel) { $rank_nivel = $result_nivel['rank_nivel']; } $sql_rank_sala = "SELECT rank_sala FROM (SELECT id, ROW_NUMBER() OVER (ORDER BY tempo_sala DESC, id ASC) as rank_sala FROM usuarios) AS ranked_by_time WHERE id = :user_id"; $stmt_rank_sala = $conn->prepare($sql_rank_sala); $stmt_rank_sala->execute([':user_id' => $id]); $result_sala = $stmt_rank_sala->fetch(PDO::FETCH_ASSOC); if ($result_sala) { $rank_sala = $result_sala['rank_sala']; } } catch (PDOException $e_rank) { error_log("PDOException ranks user {$id}: " . $e_rank->getMessage()); }
    try { $stmt_notif_init = $conn->prepare("SELECT id, message_text, type, is_read, timestamp, related_data FROM user_notifications WHERE user_id = :user_id ORDER BY timestamp DESC LIMIT :limit_notif"); $stmt_notif_init->bindValue(':user_id', $id, PDO::PARAM_INT); $stmt_notif_init->bindValue(':limit_notif', $notification_limit, PDO::PARAM_INT); if (!$stmt_notif_init->execute()) { error_log("Erro PDO Notif Init user {$id}: ".print_r($stmt_notif_init->errorInfo(), true)); $initial_notifications=[]; } else { $initial_notifications = $stmt_notif_init->fetchAll(PDO::FETCH_ASSOC); } } catch(PDOException $e_notif) { error_log("PDOException Notif Init user {$id}: ".$e_notif->getMessage()); $initial_notifications=[]; }
    // Busca de chat mantida no backend, mas sem display no HTML central
    try { $stmt_hist = $conn->prepare("SELECT id, user_id, username, message_text, timestamp FROM ( SELECT id, user_id, username, message_text, timestamp FROM chat_messages ORDER BY id DESC LIMIT :limit_chat ) sub ORDER BY id ASC"); $stmt_hist->bindValue(':limit_chat', $chat_history_limit, PDO::PARAM_INT); $stmt_hist->execute(); $chat_history = $stmt_hist->fetchAll(PDO::FETCH_ASSOC); } catch(PDOException $e_chat) { error_log("PDOException Chat Hist user {$id}: ".$e_chat->getMessage()); $chat_history=[]; }
} catch (PDOException $e) { error_log("Erro PDO GERAL (Setup) " . basename(__FILE__) . " user {$id}: " . $e->getMessage()); $mensagem_final_feedback .= "<br><span class='error-message'>Erro crítico DB (Setup). Avise um Admin.</span>"; if ($usuario === null) { echo "Erro crítico de banco de dados."; exit(); } } catch (Exception $ex) { error_log("Erro GERAL (Setup) " . basename(__FILE__) . " user {$id}: " . $ex->getMessage()); $mensagem_final_feedback .= "<br><span class='error-message'>Erro crítico APP (Setup). Avise um Admin.</span>"; if ($usuario === null) { echo "Erro crítico inesperado."; exit(); } }
$nome_formatado_usuario = htmlspecialchars($usuario['nome'] ?? 'ErroNome'); if (function_exists('formatarNomeUsuarioComTag')) { $nome_formatado_usuario = formatarNomeUsuarioComTag($conn, $usuario); }
$xp_necessario_calc = 0; $xp_percent = 0; $xp_necessario_display = 'N/A'; if (defined('XP_BASE_LEVEL_UP') && defined('XP_EXPOENTE_LEVEL_UP') && isset($usuario['nivel'])) { $nivel_atual_num = filter_var($usuario['nivel'] ?? 1, FILTER_VALIDATE_INT, ['options' => ['min_range' => 1]]); if ($nivel_atual_num === false) $nivel_atual_num = 1; $xp_necessario_calc = (int)ceil(XP_BASE_LEVEL_UP * pow($nivel_atual_num, XP_EXPOENTE_LEVEL_UP)); $xp_necessario_calc = max(XP_BASE_LEVEL_UP, $xp_necessario_calc); $xp_necessario_display = number_format($xp_necessario_calc); if ($xp_necessario_calc > 0 && isset($usuario['xp'])) { $xp_atual_num = filter_var($usuario['xp'] ?? 0, FILTER_VALIDATE_INT); if ($xp_atual_num !== false) { $xp_percent = min(100, max(0, ($xp_atual_num / $xp_necessario_calc) * 100)); } else { $xp_percent = 0; } } }
$nome_arquivo_foto = !empty($usuario['foto']) && file_exists('uploads/'.$usuario['foto']) ? $usuario['foto'] : 'default.jpg'; $caminho_web_foto = 'uploads/' . htmlspecialchars($nome_arquivo_foto);
$hp_atual_base = (int)($usuario['hp'] ?? 0); $ki_atual_base = (int)($usuario['ki'] ?? 0); $pode_entrar_templo_base = ($hp_atual_base > 0 && $ki_atual_base > 0); $mensagem_bloqueio_templo_base = 'Recupere HP/Ki base!'; if (!function_exists('formatNumber')) { function formatNumber($num) { return number_format($num ?? 0, 0, ',', '.'); } }
$sidebarItems = [ ['id' => 'praca', 'label' => 'Praça Central', 'href' => 'home.php', 'icon' => 'img/praca.jpg'], ['id' => 'guia', 'label' => 'Guia do Guerreiro Z', 'href' => 'guia_guerreiro.php', 'icon' => 'img/guiaguerreiro.jpg'], ['id' => 'equipe', 'label' => 'Equipe Z', 'href' => 'script/grupos.php', 'icon' => 'img/grupos.jpg'], ['id' => 'banco', 'label' => 'Banco Galáctico', 'href' => 'script/banco.php', 'icon' => 'img/banco.jpg'], ['id' => 'urunai', 'label' => 'Palácio da Vovó Uranai', 'href' => 'urunai.php', 'icon' => 'img/urunai.jpg'], ['id' => 'kame', 'label' => 'Casa do Mestre Kame', 'href' => 'kame.php', 'icon' => 'img/kame.jpg'], ['id' => 'sala_tempo', 'label' => 'Sala do Tempo', 'href' => 'templo.php', 'icon' => 'img/templo.jpg'], ['id' => 'treinos', 'label' => 'Zona de Treinamento', 'href' => 'desafios/treinos.php', 'icon' => 'img/treinos.jpg'], ['id' => 'desafios', 'label' => 'Desafios Z', 'href' => 'desafios.php', 'icon' => 'img/desafios.jpg'], ['id' => 'esferas', 'label' => 'Buscar Esferas', 'href' => 'esferas.php', 'icon' => 'img/esferar.jpg'], ['id' => 'erros', 'label' => 'Relatar Erros', 'href' => 'erros.php', 'icon' => 'img/erros.jpg'], ['id' => 'perfil', 'label' => 'Perfil de Guerreiro', 'href' => 'perfil.php', 'icon' => 'img/perfil.jpg'] ]; // Ícone Erro corrigido para .jpg
$bottomNavItems = [ ['label' => 'Home', 'href' => 'home.php', 'icon' => '🏠'], ['label' => 'Praça', 'href' => 'praca.php', 'icon' => '👥'], ['label' => 'Templo', 'href' => 'templo.php', 'icon' => '🏛️', 'id' => 'sala_tempo'], ['label' => 'Kame', 'href' => 'kame.php', 'icon' => '🐢'], ['label' => 'Perfil', 'href' => 'perfil.php', 'icon' => '👤'] ]; $foundArena = false; $foundTreinos = false; foreach ($bottomNavItems as $item) { if (strpos($item['href'], 'arena') !== false) $foundArena = true; if (strpos($item['href'], 'treinos') !== false || strpos($item['href'], 'desafios') !== false) $foundTreinos = true; } if (!$foundArena) { $bottomNavItems[] = ['label' => 'Arena', 'href' => 'arena/arenaroyalle.php', 'icon' => '⚔️']; } if (!$foundTreinos) { $bottomNavItems[] = ['label' => 'Treinos', 'href' => 'desafios/treinos.php', 'icon' => '💪']; }

?>
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Goku House - <?= htmlspecialchars($usuario['nome'] ?? 'Jogador') ?></title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Bangers&display=swap" rel="stylesheet">
    <style>
        /* === CSS Completo (Layout Treinos + Estilos Formulário/Modal Adaptados) === */
        :root { /* ... (Variáveis CSS mantidas) ... */ --bg-image-url: url('https://c4.wallpaperflare.com/wallpaper/870/538/510/dragon-ball-dragon-ball-z-west-city-hd-wallpaper-preview.jpg'); --panel-bg: rgba(25, 28, 36, 0.9); --panel-border: rgba(255, 255, 255, 0.15); --text-primary: #e8eaed; --text-secondary: #bdc1c6; --accent-color-1: #00e676; --accent-color-2: #ffab00; --accent-color-3: #2979ff; --danger-color: #ff5252; --disabled-color: #5f6368; --border-radius: 10px; --shadow: 0 8px 25px rgba(0, 0, 0, 0.5); --font-main: 'Roboto', sans-serif; --font-display: 'Bangers', cursive;}
        /* Keyframes */
        @keyframes pulse-glow-button { 0%{box-shadow: 0 0 8px var(--accent-color-2), inset 0 1px 1px rgba(255,255,255,0.2);transform:scale(1)} 70%{box-shadow: 0 0 16px 4px var(--accent-color-2), inset 0 1px 1px rgba(255,255,255,0.3);transform:scale(1.03)} 100%{box-shadow: 0 0 8px var(--accent-color-2), inset 0 1px 1px rgba(255,255,255,0.2);transform:scale(1)} }
        @keyframes shine { 0%{left:-100%} 50%,100%{left:150%} }
        @keyframes ki-charge { 0%{background-size:100% 100%;opacity:.6} 50%{background-size:150% 150%;opacity:1} 100%{background-size:100% 100%;opacity:.6} }

        *, *::before, *::after { margin: 0; padding: 0; box-sizing: border-box; }
        body { background-image: var(--bg-image-url); background-size: cover; background-position: center; background-attachment: fixed; color: var(--text-primary); font-family: var(--font-main); margin: 0; padding: 20px; min-height: 100vh; background-color: #0b0c10; overflow-x: hidden; }
        .container { width: 100%; max-width: 1500px; display: flex; justify-content: center; gap: 20px; align-items: flex-start; margin-left: auto; margin-right: auto; }
        .coluna { background-color: var(--panel-bg); border-radius: var(--border-radius); padding: 20px; box-shadow: var(--shadow); border: 1px solid var(--panel-border); backdrop-filter: blur(6px); display: flex; flex-direction: column; /* Adicionado para flexibilidade interna */ }

        /* Feedback */
        .feedback-container { order: -1; /* Faz o feedback aparecer no topo */ width: 100%; max-width: 1100px; /* Largura do container principal */ margin: 0 auto 20px auto; padding: 15px 25px; background-color: rgba(30, 34, 44, 0.95); border-radius: var(--border-radius); box-shadow: var(--shadow); text-align: center; font-weight: 500; font-size: 1rem; line-height: 1.6; border: 1px solid var(--panel-border); border-left-width: 5px; display: <?php echo !empty($mensagem_final_feedback) ? 'block' : 'none'; ?>; border-left-color: var(--accent-color-3); color: var(--text-primary); }
        .feedback-container:has(.levelup-message) { border-left-color: var(--accent-color-2); background-color: rgba(40, 44, 52, 0.95); } .feedback-container .levelup-message, .feedback-container:has(.levelup-message) strong { color: var(--accent-color-2); } .feedback-container:has(.error-message), .feedback-container:has(.error) { border-left-color: var(--danger-color); background-color: rgba(50, 30, 30, 0.95); } .feedback-container .error-message, .feedback-container .error { color: var(--danger-color) !important; }

        /* Coluna Esquerda */
        .coluna-esquerda { width: 25%; min-width: 270px; text-align: center; gap: 12px; }
        .player-card { margin-bottom: 5px; flex-shrink: 0; } .foto { width: 120px; height: 120px; border-radius: 50%; object-fit: cover; border: 4px solid var(--accent-color-1); margin: 0 auto 10px auto; box-shadow: 0 0 15px rgba(0, 230, 118, 0.5); transition: transform 0.3s ease; display: block; } .foto:hover { transform: scale(1.05); } .player-name { font-size: 1.3rem; font-weight: 700; color: #fff; margin-bottom: 2px; word-wrap: break-word; } .player-level { font-size: 1.0rem; font-weight: 500; color: var(--accent-color-1); margin-bottom: 3px; } .player-race { font-size: 0.8rem; font-weight: 500; color: var(--text-secondary); margin-bottom: 3px; } .player-rank { font-size: 0.8rem; font-weight: 500; color: var(--accent-color-3); margin-bottom: 10px; } .zeni-display { font-size: 1rem; color: var(--accent-color-2); font-weight: 700; margin-bottom: 6px; flex-shrink: 0;}
        .xp-bar-container { width: 100%; margin-bottom: 10px; flex-shrink: 0;} .xp-label { font-size: 0.7rem; color: var(--text-secondary); text-align: left; margin-bottom: 3px; display: block; } .xp-bar { height: 11px; background-color: rgba(0, 0, 0, 0.3); border-radius: 6px; overflow: hidden; position: relative; border: 1px solid rgba(255,255,255,0.1); } .xp-bar-fill { height: 100%; background: linear-gradient(90deg, var(--accent-color-3), var(--accent-color-1)); border-radius: 6px; transition: width 0.5s ease-in-out; animation: ki-charge 1.5s linear infinite; } .xp-text { position: absolute; top: -1px; left: 0; right: 0; font-size: 0.65rem; font-weight: 500; color: #fff; text-shadow: 1px 1px 2px rgba(0,0,0,0.7); line-height: 13px; text-align: center; }
        .btn-pontos { display: inline-block; padding: 8px 15px; background: linear-gradient(45deg, var(--accent-color-2), #ffc107); color: #111; text-decoration: none; font-weight: 700; font-size: 0.9rem; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); margin-bottom: 8px; border: none; text-align: center; transition: all 0.2s ease; cursor: pointer; animation: pulse-glow-button 2.5s infinite alternate ease-in-out; flex-shrink: 0;} .btn-pontos:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4); filter: brightness(1.1); } .btn-pontos[style*="cursor: default"] { background: var(--disabled-color); color: var(--text-secondary); filter: none; box-shadow: none; animation: none; }
        .stats-grid { display: grid; grid-template-columns: auto 1fr; gap: 5px 10px; text-align: left; font-size: 0.8rem; width: 100%; flex-shrink: 0;} .stats-grid strong { color: var(--text-secondary); font-weight: 500; font-size: 0.75rem;} .stats-grid span { color: var(--text-primary); font-weight: 500; text-align: right; font-size: 0.8rem;}
        .divider { height: 1px; background-color: var(--panel-border); border: none; margin: 10px 0; flex-shrink: 0;}
        /* REMOVIDOS: Botões de ação da coluna esquerda */

        /* Coluna Central (Apenas Formulário de Erro) */
        .coluna-central {
            width: 48%; text-align: left; gap: 15px;
            /* Scroll não é mais necessário por padrão com menos conteúdo */
            /* overflow-y: auto; max-height: calc(100vh - 60px); */
        }
        .coluna-central h1.form-title { font-family: var(--font-display); color: var(--accent-color-2); text-align: center; font-size: 2.5rem; margin: 0 0 15px 0; padding-bottom: 10px; border-bottom: 2px solid var(--accent-color-2); text-shadow: 2px 2px 3px rgba(0,0,0,0.4); letter-spacing: 1.5px; }
        .coluna-central p.greeting { text-align: center; margin-bottom: 20px; color: var(--text-secondary); font-weight: 500; font-size: 1rem; }
        .coluna-central form { display: flex; flex-direction: column; gap: 15px; width: 100%; /* Garante que o form ocupe espaço */ }
        .coluna-central form div { margin-bottom: 5px; }
        .coluna-central form label { display: block; margin-bottom: 6px; font-weight: 500; color: var(--text-secondary); font-size: 0.9rem; }
        .coluna-central form input[type="text"],
        .coluna-central form textarea { width: 100%; padding: 12px 15px; margin-top: 0; border: 1px solid var(--panel-border); border-radius: 6px; box-sizing: border-box; font-size: 0.95rem; font-family: var(--font-main); background-color: rgba(0, 0, 0, 0.25); color: var(--text-primary); transition: border-color 0.3s ease, box-shadow 0.3s ease; }
        .coluna-central form input[type="text"]:focus,
        .coluna-central form textarea:focus { border-color: var(--accent-color-3); outline: none; box-shadow: 0 0 8px rgba(41, 121, 255, 0.4); }
        .coluna-central form textarea { height: 120px; resize: vertical; }
        .coluna-central form button[type="submit"] { background: linear-gradient(145deg, var(--accent-color-1), #00bfa5); color: #000; padding: 12px 25px; border: none; border-radius: 8px; cursor: pointer; margin-top: 15px; font-size: 1.1rem; font-weight: 700; font-family: var(--font-main); width: 100%; transition: all 0.3s ease; text-transform: uppercase; letter-spacing: 1px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); }
        .coluna-central form button[type="submit"]:hover { background: linear-gradient(145deg, #00bfa5, var(--accent-color-1)); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4); transform: translateY(-2px); filter: brightness(1.1); }

        /* Coluna Direita (Notificações no Topo + Navegação) */
        .coluna-direita {
            width: 25%; min-width: 250px; padding: 15px; display: flex; flex-direction: column; gap: 8px;
        }
        /* Área de Notificações na Coluna Direita */
        .notifications-area { /* Movido para cá */
            margin-bottom: 15px; /* Espaço abaixo das notificações */
            text-align: left; flex-shrink: 0; /* Não encolhe */
            width: 100%; /* Ocupa largura da coluna */
        }
        .notifications-area h3 { color: var(--accent-color-3); font-size: 1.1rem; margin-bottom: 8px; padding-bottom: 5px; border-bottom: 1px solid var(--panel-border); font-weight: 500; }
        .notifications-container-style { background-color: rgba(0,0,0,0.2); border: 1px solid var(--panel-border); border-radius: 8px; max-height: 250px; overflow-y: auto; scrollbar-width: thin; scrollbar-color: var(--panel-border) rgba(0,0,0,0.2); width: 100%; }
        .notifications-container-style::-webkit-scrollbar { width: 5px; } .notifications-container-style::-webkit-scrollbar-track { background: rgba(0,0,0,0.2); border-radius: 3px;} .notifications-container-style::-webkit-scrollbar-thumb { background-color: var(--panel-border); border-radius: 3px; } .notifications-container-style::-webkit-scrollbar-thumb:hover { background-color: var(--accent-color-3); }
        #notification-list { padding: 8px; } .notification-item { background-color: rgba(40, 44, 52, 0.7); border: 1px solid var(--panel-border); border-left-width: 4px; border-radius: 4px; padding: 8px 12px; margin-bottom: 6px; position: relative; font-size: 0.8rem; color: var(--text-primary); transition: background-color 0.2s; } .notification-item:hover { background-color: rgba(55, 62, 76, 0.8); } .notification-item.type-invite { border-left-color: var(--accent-color-2); } .notification-item.type-info { border-left-color: var(--accent-color-3); } .notification-item.type-system { border-left-color: var(--accent-color-1); } .notification-item.type-warning { border-left-color: var(--danger-color); } .notification-item .mark-read-btn { position: absolute; top: 3px; right: 3px; background: none; border: none; color: #7f8c8d; font-size: 1.3em; line-height: 1; cursor: pointer; padding: 0 3px; opacity: 0.7; transition: all 0.2s; } .notification-item .mark-read-btn:hover { color: var(--danger-color); opacity: 1; } .notification-item .timestamp { font-size: 0.7em; color: #90a4ae; position: absolute; top: 4px; right: 25px; } .notification-item .msg-text { display: block; padding-right: 50px; } .notification-item .msg-text strong { color: var(--accent-color-1); font-weight: 600; } .notification-actions { margin-top: 6px; padding-top: 6px; border-top: 1px solid var(--panel-border); text-align: right; } .notification-actions .btn-action { display: inline-block; padding: 4px 8px; border:none; border-radius: 4px; font-size: 0.7em; font-weight: 500; text-decoration: none; text-align: center; cursor: pointer; transition: all 0.2s ease; margin-left: 6px; } .btn-aceitar { background-color: var(--accent-color-1); color: #111; } .btn-recusar { background-color: var(--danger-color); color: #fff; } .notification-empty { color: var(--text-secondary); text-align: center; padding: 15px; font-style: italic; font-size: 0.85em; }
        /* Botões de Navegação (Após Notificações) */
        .nav-button { display: grid; grid-template-columns: 50px 1fr; align-items: center; gap: 10px; padding: 12px 15px 12px 10px; background: linear-gradient(to bottom, rgba(55, 62, 76, 0.85), rgba(40, 44, 52, 0.85)); color: var(--text-secondary); text-decoration: none; border-radius: 8px; border: 1px solid var(--panel-border); font-size: 0.9rem; font-weight: 500; transition: all 0.2s ease; position: relative; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.2); cursor: pointer; }
        .nav-button-icon-area { grid-column: 1 / 2; display: flex; justify-content: center; align-items: center; width: 100%; height: 30px; }
        .nav-button-icon { width: 30px; height: 30px; object-fit: contain; opacity: 0.7; transition: opacity 0.2s ease, transform 0.2s ease; display: block; margin: 0; flex-shrink: 0;}
        .nav-button span { grid-column: 2 / 3; text-align: left; }
        .nav-button:hover { background: linear-gradient(to bottom, rgba(65, 72, 86, 0.95), rgba(50, 54, 62, 0.95)); border-color: rgba(255, 255, 255, 0.3); color: #fff; transform: translateY(-2px) scale(1.01); box-shadow: 0 5px 10px rgba(0,0,0,0.3), 0 0 8px rgba(41, 121, 255, 0.4); }
        .nav-button:hover .nav-button-icon { opacity: 1; transform: scale(1.05); }
        .nav-button:active { transform: translateY(0px) scale(1.0); box-shadow: 0 2px 4px rgba(0,0,0,0.2); filter: brightness(0.95); }
        .nav-button.active { background: linear-gradient(to bottom, var(--accent-color-1), #00c853); color: #000; border-color: rgba(0, 230, 118, 0.5); font-weight: 700; box-shadow: 0 3px 6px rgba(0,0,0,0.3), inset 0 1px 1px rgba(255,255,255,0.2); } .nav-button.active .nav-button-icon { opacity: 1; filter: brightness(0.8); } .nav-button.active:hover { filter: brightness(1.1); box-shadow: 0 5px 10px rgba(0,0,0,0.3), 0 0 8px var(--accent-color-1); }
        .nav-button.disabled { background: var(--disabled-color); color: #8894a8; cursor: not-allowed; border-color: rgba(0, 0, 0, 0.2); opacity: 0.6; box-shadow: none; } .nav-button.disabled:hover { background: var(--disabled-color); transform: none; border-color: rgba(0, 0, 0, 0.2); color: #8894a8; box-shadow: none; } .nav-button.disabled .nav-button-icon { filter: grayscale(100%); opacity: 0.5; }
        .nav-button.logout { /* Estilos específicos se necessário */ } .nav-button.logout:hover { background-color: rgba(231, 76, 60, 0.9); border-color: rgba(255, 255, 255, 0.2); box-shadow: 0 5px 10px rgba(0,0,0,0.3), 0 0 8px var(--danger-color); }
        .nav-button.logout span { grid-column: 2 / 3; } .nav-button.logout .nav-button-icon-area { grid-column: 1 / 2; }

        /* Modal Styles */
        .modal-overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); z-index: 1000; display: flex; justify-content: center; align-items: center; visibility: hidden; opacity: 0; transition: opacity 0.3s ease, visibility 0.3s ease; }
        .modal-overlay.visible { visibility: visible; opacity: 1; }
        .modal-content { background-color: var(--panel-bg); color: var(--text-primary); padding: 25px 35px; border-radius: var(--border-radius); border: 1px solid var(--panel-border); border-top-width: 8px; box-shadow: var(--shadow); text-align: center; max-width: 550px; width: 90%; position: relative; transform: scale(0.9); transition: transform 0.3s ease; backdrop-filter: blur(4px); }
        .modal-overlay.visible .modal-content { transform: scale(1); }
        .modal-content.success { border-top-color: var(--accent-color-1); } .modal-content.error, .modal-content.invalid { border-top-color: var(--danger-color); }
        .modal-title { font-family: var(--font-main); font-weight: 700; font-size: 1.8rem; margin-bottom: 15px; letter-spacing: 0.5px; } .modal-title.success { color: var(--accent-color-1); } .modal-title.error, .modal-title.invalid { color: var(--danger-color); }
        .modal-message { font-size: 1rem; margin-bottom: 25px; color: var(--text-secondary); line-height: 1.6; }
        .close-modal-btn { background-color: var(--accent-color-3); color: white; padding: 10px 25px; border: none; border-radius: 6px; cursor: pointer; font-size: 0.95rem; font-weight: 500; transition: all 0.2s ease; } .close-modal-btn:hover { background-color: #1e88e5; filter: brightness(1.1); transform: scale(1.02); }

        /* Bottom Nav */
        #bottom-nav { display: none; position: fixed; bottom: 0; left: 0; right: 0; background-color: rgba(20, 23, 31, 0.97); border-top: 1px solid var(--panel-border); padding: 2px 0; box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.35); justify-content: space-around; align-items: stretch; z-index: 1000; backdrop-filter: blur(6px); height: 60px; } .bottom-nav-item { display: flex; flex-direction: column; align-items: center; justify-content: center; flex-grow: 1; text-decoration: none; color: var(--text-secondary); padding: 4px 2px; font-size: 0.65rem; text-align: center; transition: background-color 0.2s ease, color 0.2s ease; cursor: pointer; border-radius: 5px; margin: 2px; line-height: 1.2; } .bottom-nav-item:not(.active):not(.disabled):hover { background-color: rgba(255, 255, 255, 0.05); color: var(--text-primary); } .bottom-nav-item.active { color: var(--accent-color-1); font-weight: bold; background-color: rgba(0, 230, 118, 0.1); } .bottom-nav-item span:first-child { font-size: 1.5rem; line-height: 1; margin-bottom: 4px; } .bottom-nav-item.disabled { cursor: not-allowed; opacity: 0.5; color: #6a7383 !important; background-color: transparent !important; } .bottom-nav-item.disabled:hover { color: #6a7383 !important; }

        /* Media Queries */
        @media (max-width: 1200px) { body { padding: 15px; } .container { flex-direction: column; align-items: center; width: 100%; padding: 0; gap: 15px; } .coluna { width: 100% !important; max-width: 700px; margin-bottom: 15px; } .coluna-direita, .coluna-esquerda { min-width: unset; } .coluna-central { max-height: none; overflow-y: visible; } }
        @media (max-width: 768px) { body { padding: 10px; padding-bottom: 75px; } .feedback-container { font-size: 0.9rem; padding: 10px 15px; margin: 0 auto 10px auto;} .coluna-direita { display: none; } #bottom-nav { display: flex; } .coluna { padding: 15px; } .foto { width: 100px; height: 100px; } .player-name { font-size: 1.2rem; } .player-level { font-size: 0.95rem; } .stats-grid { font-size: 0.8rem; } .btn-pontos { font-size: 0.85rem; } .coluna-central h1 { font-size: 1.8rem; margin-bottom: 15px;} .coluna-central h2 { font-size: 1.3rem; } .coluna-central h3 { font-size: 1.0rem; } .coluna-central p { font-size: 0.85rem; } .coluna-esquerda > div:last-child { margin-top: 15px; padding-top: 10px; border-top: 1px solid var(--panel-border); } .action-button { font-size: 0.85rem; padding: 10px 12px;} .notifications-area { min-height: 100px; } .notifications-container-style { max-height: 180px; } }
        @media (max-width: 480px) { body { padding: 8px; padding-bottom: 70px; } .container { gap: 8px; } .coluna { padding: 12px; margin-bottom: 8px; } .foto { width: 80px; height: 80px; border-width: 3px;} .player-name { font-size: 1.0rem; } .player-level { font-size: 0.85rem; } .player-race, .player-rank { font-size: 0.75rem; } .zeni-display { font-size: 0.9rem; } .xp-bar-container { margin-bottom: 8px;} .xp-label { font-size: 0.7rem;} .xp-bar { height: 9px;} .xp-text { font-size: 0.6rem; line-height: 11px;} .stats-grid { font-size: 0.75rem; gap: 4px 8px; } .stats-grid strong { font-weight: 400; font-size: 0.7rem;} .stats-grid span { font-size: 0.75rem;} .btn-pontos { font-size: 0.8rem; padding: 7px 12px;} .action-button { font-size: 0.8rem; padding: 9px 10px;} .coluna-central h1 { font-size: 1.6rem;} .coluna-central h2 { font-size: 1.1rem; } .coluna-central h3 { font-size: 0.95rem; } .coluna-central p { font-size: 0.8rem; } #bottom-nav { height: 55px; } .bottom-nav-item span:first-child { font-size: 1.2rem; } .bottom-nav-item span:last-child { font-size: 0.6rem; } .feedback-container { font-size: 0.85rem; padding: 8px 12px; margin: 0 auto 8px auto;} }

    </style>
</head>
<body>

    <?php if (!empty($mensagem_final_feedback)): ?> <div class="feedback-container"><?= nl2br($mensagem_final_feedback) ?></div> <?php endif; ?>

    <div class="container">

        <?php // --- COLUNA ESQUERDA (Sem botões de ação no final) --- ?>
        <div class="coluna coluna-esquerda">
             <div class="player-card">
                 <img class="foto" src="<?= $caminho_web_foto ?>" alt="Foto de <?= htmlspecialchars($usuario['nome'] ?? '') ?>">
                 <div class="player-name"><?= $nome_formatado_usuario ?></div> <div class="player-level">Nível <?= htmlspecialchars($usuario['nivel'] ?? '?') ?></div> <div class="player-race">Raça: <?= htmlspecialchars($usuario['raca'] ?? 'N/D') ?></div> <div class="player-rank">Título: <?= htmlspecialchars($usuario['ranking_titulo'] ?? 'Iniciante') ?></div>
             </div>
             <div class="zeni-display">💰 Zeni: <?= formatNumber($usuario['zeni'] ?? 0) ?></div>
             <div class="xp-bar-container"> <span class="xp-label">Experiência</span> <div class="xp-bar"> <div class="xp-bar-fill" style="width: <?= $xp_percent ?>%;"></div> <div class="xp-text"><?= formatNumber($usuario['xp'] ?? 0) ?> / <?= $xp_necessario_display ?></div> </div> </div>
             <?php $pontos_num = filter_var($usuario['pontos'] ?? 0, FILTER_VALIDATE_INT); ?>
             <?php if ($pontos_num > 0 && $currentPage !== 'perfil.php'): ?> <a href="perfil.php" class="btn-pontos"> <?= number_format($pontos_num) ?> Pontos! <span style="font-size: 0.8em;">(Distribuir)</span> </a> <?php elseif($pontos_num > 0): ?> <div class="btn-pontos" style="cursor: default; background: var(--disabled-color); color: var(--text-secondary); filter: none; box-shadow: none; animation: none;"><?= number_format($pontos_num) ?> Pontos (Distribuir no Perfil)</div> <?php endif; ?>
             <div class="stats-grid"> <strong>HP Base</strong><span><?= formatNumber($usuario['hp'] ?? 0) ?></span> <strong>Ki Base</strong><span><?= formatNumber($usuario['ki'] ?? 0) ?></span> <strong>Força</strong><span><?= formatNumber($usuario['forca'] ?? 0) ?></span> <strong>Defesa</strong><span><?= formatNumber($usuario['defesa'] ?? 0) ?></span> <strong>Velocidade</strong><span><?= formatNumber($usuario['velocidade'] ?? 0) ?></span> <strong>Pontos</strong><span style="color: var(--accent-color-2); font-weight:700;"><?= formatNumber($usuario['pontos'] ?? 0) ?></span> <strong>Rank (Nível)</strong><span style="color: var(--accent-color-1); font-weight:700;"><?= htmlspecialchars($rank_nivel) ?><?= ($rank_nivel !== 'N/A' ? 'º' : '') ?></span> <strong>Rank (Sala)</strong><span style="color: var(--accent-color-1); font-weight:700;"><?= htmlspecialchars($rank_sala) ?><?= ($rank_sala !== 'N/A' ? 'º' : '') ?></span> </div>
             <div class="divider"></div>
             <div class="stats-grid" style="font-size: 0.85rem; margin-top: 10px;"> <strong>ID</strong><span><?= htmlspecialchars($usuario['id'] ?? 'N/A') ?></span> <strong>Tempo Sala</strong><span><?= formatNumber($usuario['tempo_sala'] ?? 0) ?> min</span> </div>
             <?php // Botões de ação Perfil/Sair REMOVIDOS daqui ?>
        </div><?php // --- COLUNA CENTRAL (Formulário de Erro) --- ?>
        <div class="coluna coluna-central">
            <h1 class="form-title">Relatório Z</h1>
            <p class="greeting">Detectou uma falha na Matrix, <?= htmlspecialchars($usuario['nome'] ?? 'Guerreiro') ?>? Envie seu relatório!</p>

            <form id="bugReportForm" action="" method="POST">
                <input type="hidden" name="userId" value="<?= htmlspecialchars($id) ?>">
                <input type="hidden" name="userLevel" value="<?= htmlspecialchars($usuario['nivel'] ?? 1) ?>">
                <input type="hidden" name="userName" value="<?= htmlspecialchars($usuario['nome'] ?? 'N/A') ?>">
                <div>
                    <label for="errorLocation">Planeta/Coordenadas do Erro:</label>
                    <input type="text" id="errorLocation" name="errorLocation" placeholder="Ex: Planeta Namekusei, Plataforma Celeste..." required>
                </div>
                <div>
                    <label for="errorDescription">Relatório do Scouter (Descrição e Passos):</label>
                    <textarea id="errorDescription" name="errorDescription" placeholder="Descreva o que o scouter detectou de errado e como você chegou lá..." required></textarea>
                </div>
                <button type="submit">Enviar Relatório Urgente!</button>
            </form>
        </div> <?php // --- COLUNA DIREITA (Notificações no Topo + Navegação) --- ?>
        <div class="coluna coluna-direita">
            <div class="notifications-area">
                 <h3>Notificações</h3>
                 <div id="notifications-container" class="notifications-container-style"> <div id="notification-list"> <?php if (!empty($initial_notifications)): ?> <?php foreach (array_reverse($initial_notifications) as $notif): ?> <?php $notif_class = 'notification-item type-' . htmlspecialchars($notif['type'] ?? 'info'); $timestamp_fmt = isset($notif['timestamp']) ? date('H:i', strtotime($notif['timestamp'])) : '??:??'; $related_data_sanitized = $notif['related_data'] ?? new stdClass(); if (is_string($related_data_sanitized)) { try { $decoded = json_decode($related_data_sanitized, true); $related_data_sanitized = ($decoded === null && json_last_error() !== JSON_ERROR_NONE) ? new stdClass() : $decoded; } catch (Exception $e) { $related_data_sanitized = new stdClass(); } } if (!is_object($related_data_sanitized) && !is_array($related_data_sanitized)) { $related_data_sanitized = new stdClass(); } $related_data_json = json_encode($related_data_sanitized, JSON_UNESCAPED_UNICODE | JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP); ?> <div class="<?= $notif_class ?>" data-notification-id="<?= (int)$notif['id'] ?>" data-related='<?= htmlspecialchars($related_data_json, ENT_QUOTES, 'UTF-8') ?>'> <button class="mark-read-btn" title="Remover Notificação" onclick="markNotificationAsRead(<?= (int)$notif['id'] ?>, this)">×</button> <span class="timestamp"><?= $timestamp_fmt ?></span> <span class="msg-text"><?= htmlspecialchars($notif['message_text']) ?></span> </div> <?php endforeach; ?> <?php else: ?> <p class="notification-empty">Nenhuma notificação nova.</p> <?php endif; ?> </div> </div>
             </div>
             <div class="divider" style="margin: 15px 0;"></div> 

            <?php // Navegação (Mantida abaixo das notificações)
             foreach ($sidebarItems as $item) {
                 $href = $item['href']; $label = htmlspecialchars($item['label']); $iconPath = $item['icon'] ?? ''; $idItem = $item['id'];
                 $classe_extra = ''; $atributos_extra = ''; $title = $label; $iconHtml = '';
                 $iconFullPath = !empty($iconPath) ? $iconPath : '';
                 if (!empty($iconFullPath) && file_exists($iconFullPath)) { $iconHtml = '<img src="' . htmlspecialchars($iconFullPath) . '" class="nav-button-icon" alt="">'; }
                 else { if (!empty($iconPath)) { error_log("Icone nao encontrado Nav Direita: " . $iconFullPath); } }
                 if ($idItem === 'sala_tempo') { if (!$pode_entrar_templo_base) { $classe_extra = ' disabled'; $atributos_extra = ' onclick="alert(\''.htmlspecialchars($mensagem_bloqueio_templo_base, ENT_QUOTES).'\'); return false;"'; $title = htmlspecialchars($mensagem_bloqueio_templo_base, ENT_QUOTES); $href = '#'; } else { $classe_extra = ' entrar-templo-btn'; $atributos_extra = ' data-url="'.htmlspecialchars($item['href']).'"'; $href = '#'; $title = 'Entrar na Sala do Templo'; } }
                 $baseItemHrefForCompare = basename(parse_url($item['href'], PHP_URL_PATH)); $isCurrent = ($currentPage == $baseItemHrefForCompare); if ($idItem == 'praca' && ($currentPage == 'home.php' || $currentPage == 'praca.php')) { $isCurrent = true; } if (($idItem == 'treinos' || $idItem == 'desafios') && ($currentPage == 'treinos.php' || $currentPage == 'desafios.php')) { $isCurrent = true; } if ($idItem == 'erros' && $currentPage == 'erros.php') { $isCurrent = true; }
                 if ($isCurrent && strpos($classe_extra, 'disabled') === false) { $classe_extra .= ' active'; }
                 $finalHref = htmlspecialchars($href);
                 echo "<a class=\"nav-button{$classe_extra}\" href=\"{$finalHref}\" title=\"{$title}\" {$atributos_extra}>"; echo "<div class='nav-button-icon-area'>{$iconHtml}</div>"; echo "<span>{$label}</span>"; echo "</a>";
             }
              // Botão de Logout agora está aqui
              $sairIconPath = 'img/sair.jpg'; $sairIconHtml = ''; if(file_exists($sairIconPath)) { $sairIconHtml = '<img src="'.htmlspecialchars($sairIconPath).'" class="nav-button-icon" alt="">'; } echo '<a class="nav-button logout" href="sair.php">' . "<div class='nav-button-icon-area'>{$sairIconHtml}</div>" . '<span>Sair</span></a>';
             ?>
        </div></div> <?php // --- Bottom Nav --- ?>
    <nav id="bottom-nav">
        <?php foreach ($bottomNavItems as $item): ?>
            <?php $url_destino_item = $item['href']; $final_href = ''; $final_onclick = ''; $final_title = ''; $extra_class = ''; $is_temple_button = (isset($item['id']) && $item['id'] === 'sala_tempo'); $is_current_page = ($currentPage == basename(parse_url($url_destino_item, PHP_URL_PATH))); if (($item['label'] === 'Home' || $item['label'] === 'Praça') && ($currentPage === 'home.php' || $currentPage === 'praca.php')) { $is_current_page = true; } if ($item['label'] === 'Treinos' && ($currentPage === 'treinos.php' || $currentPage === 'desafios.php')) { $is_current_page = true; } if ($is_temple_button) { $final_href = '#'; $url_destino_templo_nav_dir_bottom = 'templo.php'; if (!$pode_entrar_templo_base) { $final_onclick = ' onclick="alert(\'' . htmlspecialchars($mensagem_bloqueio_templo_base) . '\'); return false;"'; $final_title = 'HP ou Ki base em 0'; $extra_class = ' disabled'; } else { $extra_class = ' entrar-templo-btn'; $final_title = 'Entrar na Sala do Templo'; } } else { $final_href = htmlspecialchars($url_destino_item); $final_title = 'Ir para ' . htmlspecialchars($item['label']); } $active_class = ($is_current_page && strpos($extra_class, 'disabled') === false) ? ' active' : ''; echo "<a href='{$final_href}' class='bottom-nav-item{$active_class}{$extra_class}'"; if ($is_temple_button && $pode_entrar_templo_base) { echo " data-url='" . htmlspecialchars($url_destino_templo_nav_dir_bottom) . "'"; } echo " {$final_onclick} title='" . htmlspecialchars($final_title) . "'>"; echo "<span style='font-size: 1.4rem; line-height: 1; margin-bottom: 3px;'>{$item['icon']}</span>"; echo "<span>" . htmlspecialchars($item['label']) . "</span>"; echo "</a>"; ?>
        <?php endforeach; ?>
    </nav>

    <?php // --- Modal de Status do Formulário --- ?>
    <div id="statusModal" class="modal-overlay <?php echo $form_status ? 'visible' : ''; ?>">
        <div id="modalContent" class="modal-content <?php echo htmlspecialchars($form_status ?? '', ENT_QUOTES, 'UTF-8'); ?>">
             <h2 id="modalTitle" class="modal-title <?php echo htmlspecialchars($form_status ?? '', ENT_QUOTES, 'UTF-8'); ?>"></h2>
             <p id="modalMessage" class="modal-message"></p>
             <button id="closeModalBtn" class="close-modal-btn">Entendido!</button>
        </div>
    </div>

    <?php // --- JavaScript (Notificações + Modal + UI - Chat JS Removido) --- ?>
    <script>
        const currentUserId_Notif=<?php echo json_encode((int)$id);?>;
        const notificationHandlerUrl='notification_handler_ajax.php'; // Ajuste caminho
        let lastNotificationId=0; <?php if(!empty($initial_notifications)){$lid=0;foreach($initial_notifications as $n){if((int)$n['id']>$lid){$lid=(int)$n['id'];}} echo 'lastNotificationId = '.$lid.';';} ?>
        const notificationPollInterval=10000; let notificationPollingIntervalId=null; let isFetchingNotifications=false;
        const notificationListDiv=document.getElementById('notification-list');

        function escapeHtml(unsafe){if(typeof unsafe!=='string'){if(typeof unsafe==='number'){unsafe=String(unsafe);}else{return'';}} return unsafe.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;");}
        function formatTimestamp(timestamp){if(!timestamp)return'??:??'; try{const d=new Date(timestamp.replace(/-/g,'/')+' UTC'); if(!isNaN(d)){return d.toLocaleTimeString('pt-BR',{hour:'2-digit',minute:'2-digit',timeZone:'America/Sao_Paulo'});}}catch(e){console.error("Erro timestamp:", e);} const parts=timestamp.split(' '); if(parts.length>1&&parts[1].includes(':')){return parts[1].substring(0,5);} return'??:??';}
        function initializeNotificationSystem(){ if(!notificationListDiv) {console.warn("Div 'notification-list' não encontrada."); return;} const initialItems = notificationListDiv.querySelectorAll('.notification-item'); initialItems.forEach(item => processNotificationItem(item)); if(notificationPollingIntervalId) clearInterval(notificationPollingIntervalId); setTimeout(fetchNotificationUpdates, 700); notificationPollingIntervalId = setInterval(fetchNotificationUpdates, notificationPollInterval); document.addEventListener("visibilitychange", handleVisibilityChangeNotifications); if(notificationListDiv) { notificationListDiv.scrollTop = 0; } }
        function processNotificationItem(item) { if (!item || item.querySelector('.notification-actions')) return; try { const relatedDataStr = item.dataset.related; const notificationId = item.dataset.notificationId; const isInvite = item.classList.contains('type-invite'); if (isInvite && relatedDataStr && notificationId) { const relatedData = JSON.parse(relatedDataStr); const actionsHtml = generateNotificationActions({ id: notificationId, type: 'invite', related_data: relatedData }); if (actionsHtml) { const actionsContainer = document.createElement('div'); actionsContainer.classList.add('notification-actions'); actionsContainer.innerHTML = actionsHtml; item.appendChild(actionsContainer); } } } catch (e) { console.error("Erro processar notif item:", e, item.dataset.related); } }
        function handleVisibilityChangeNotifications(){ if(document.hidden){ if(notificationPollingIntervalId) clearInterval(notificationPollingIntervalId); notificationPollingIntervalId = null; } else { if(!notificationPollingIntervalId){ setTimeout(fetchNotificationUpdates, 250); notificationPollingIntervalId = setInterval(fetchNotificationUpdates, notificationPollInterval); } } }
        function addNotificationToDisplay(notif) { if (!notificationListDiv) return; if (!notif || !notif.id) return; if (document.querySelector(`.notification-item[data-notification-id="${notif.id}"]`)) return; const emptyMsg = notificationListDiv.querySelector('.notification-empty'); if (emptyMsg) emptyMsg.remove(); const newItem = document.createElement('div'); newItem.dataset.notificationId = notif.id; let relatedDataJson = '{}'; try { let relatedData = notif.related_data; if (typeof relatedData === 'string') { try { relatedData = JSON.parse(relatedData); } catch (e) { relatedData = {}; } } if (typeof relatedData !== 'object' || relatedData === null) { relatedData = {}; } relatedDataJson = JSON.stringify(relatedData, (key, value) => (typeof value === 'string' ? escapeHtml(value) : value)); } catch (e) { console.error("Erro related_data notif:", e); } newItem.dataset.related = relatedDataJson; newItem.classList.add('notification-item', `type-${escapeHtml(notif.type) || 'info'}`); let timestampFormatted = formatTimestamp(notif.timestamp); newItem.innerHTML = `<button class="mark-read-btn" title="Remover Notificação" onclick="markNotificationAsRead(${notif.id}, this)">×</button><span class="timestamp">${timestampFormatted}</span><span class="msg-text">${escapeHtml(notif.message_text)}</span>`; processNotificationItem(newItem); notificationListDiv.insertBefore(newItem, notificationListDiv.firstChild); const maxNotifications = 50; while (notificationListDiv.children.length > maxNotifications) { notificationListDiv.removeChild(notificationListDiv.lastChild); } if (notif.id && parseInt(notif.id) > lastNotificationId) { lastNotificationId = parseInt(notif.id); } }
        function generateNotificationActions(notif) { let relatedData = notif.related_data; if (!relatedData || typeof relatedData !== 'object') return ''; if (notif.type === 'invite') { try { if (relatedData.invite_type === 'fusion' && notif.id) { const acceptAction = `handleInviteAction(${notif.id}, 'accept', this)`; const rejectAction = `handleInviteAction(${notif.id}, 'reject', this)`; return `<button onclick="${acceptAction}" class='btn-action btn-aceitar'>Aceitar</button><button onclick="${rejectAction}" class='btn-action btn-recusar'>Recusar</button>`; } } catch (e) { console.error("Erro gerar ações notif:", e); } } return ''; }
        async function handleInviteAction(notificationId, action, buttonElement) { if (!notificationId || !action || !buttonElement) return; const actionsContainer = buttonElement.closest('.notification-actions'); if (actionsContainer) { actionsContainer.querySelectorAll('.btn-action').forEach(btn => btn.disabled = true); actionsContainer.style.opacity = '0.5'; } try { const formData = new FormData(); formData.append('notification_id', notificationId); formData.append('invite_action', action); const response = await fetch(`${notificationHandlerUrl}?action=handle_invite`, { method: 'POST', body: formData }); if (!response.ok) { throw new Error(`Erro servidor: ${response.status}`); } const data = await response.json(); if (data.success) { const notificationItem = buttonElement.closest('.notification-item'); if (notificationItem) { notificationItem.style.transition = 'opacity 0.3s, transform 0.3s'; notificationItem.style.opacity = '0'; notificationItem.style.transform = 'translateX(50px)'; setTimeout(() => { notificationItem.remove(); checkEmptyNotifications(); }, 300); } console.log(`Ação '${action}' id ${notificationId} OK.`); } else { throw new Error(data.error || 'Falha servidor.'); } } catch (error) { console.error('Erro ação convite:', error); alert(`Erro ao ${action === 'accept' ? 'aceitar' : 'recusar'} convite.`); if (actionsContainer) { actionsContainer.querySelectorAll('.btn-action').forEach(btn => btn.disabled = false); actionsContainer.style.opacity = '1'; } } }
        async function markNotificationAsRead(notificationId, buttonElement) { if (!notificationId || !buttonElement) return; const notificationItem = buttonElement.closest('.notification-item'); if (notificationItem) { notificationItem.style.transition = 'opacity 0.3s, transform 0.3s, height 0.3s, margin 0.3s, padding 0.3s'; notificationItem.style.opacity = '0'; notificationItem.style.transform = 'scale(0.9) translateX(30px)'; notificationItem.style.height = '0'; notificationItem.style.marginBottom = '0'; notificationItem.style.paddingTop = '0'; notificationItem.style.paddingBottom = '0'; notificationItem.style.borderWidth = '0'; setTimeout(() => { notificationItem.remove(); checkEmptyNotifications(); }, 300); } try { const formData = new FormData(); formData.append('notification_id', notificationId); const response = await fetch(`${notificationHandlerUrl}?action=mark_notification_read`, { method: 'POST', body: formData }); if (!response.ok) { console.error('Erro backend marcar lida.'); } } catch (error) { console.error('Erro rede marcar lida:', error); } }
        function checkEmptyNotifications() { if (notificationListDiv && notificationListDiv.children.length === 0) { const emptyMsg = document.createElement('p'); emptyMsg.classList.add('notification-empty'); emptyMsg.textContent = 'Nenhuma notificação.'; notificationListDiv.appendChild(emptyMsg); } }
        async function fetchNotificationUpdates() { if (isFetchingNotifications || document.hidden || !notificationListDiv) return; isFetchingNotifications = true; try { const fetchUrl = `${notificationHandlerUrl}?action=fetch&last_notification_id=${lastNotificationId}&t=${Date.now()}`; const response = await fetch(fetchUrl); if (!response.ok) { console.error("Erro buscar notifs:", response.status); isFetchingNotifications = false; return; } const data = await response.json(); if (data.success && data.notifications && data.notifications.length > 0) { data.notifications.reverse().forEach(notif => { addNotificationToDisplay(notif); }); } } catch (error) { console.error("Erro rede buscar notifs:", error); } finally { isFetchingNotifications = false; } }

        // --- Inicialização Geral e Lógica UI ---
        document.addEventListener('DOMContentLoaded', () => {
             document.querySelectorAll('.entrar-templo-btn:not(.disabled)').forEach(button => { button.addEventListener('click', event => { event.preventDefault(); const url = button.dataset.url || button.getAttribute('href'); if (url && url !== '#') { window.location.href = url; } else { console.warn("URL Templo inválida.", button); } }); });
             const bottomNav = document.getElementById('bottom-nav'); const rightColumn = document.querySelector('.coluna-direita'); function checkBottomNavVisibility() { if (!bottomNav || !rightColumn) return; if (window.getComputedStyle(rightColumn).display === 'none') { bottomNav.style.display = 'flex'; document.body.style.paddingBottom = (bottomNav.offsetHeight + 10) + 'px'; } else { bottomNav.style.display = 'none'; document.body.style.paddingBottom = '0'; } } checkBottomNavVisibility(); window.addEventListener('resize', checkBottomNavVisibility);

             // --- Lógica do Modal de Status (Integrada) ---
            const modalOverlay = document.getElementById('statusModal');
            const modalContent = document.getElementById('modalContent');
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            const closeModalBtn = document.getElementById('closeModalBtn');
            const formStatus = <?php echo json_encode($form_status); ?>; // Pega status do PHP via sessão
            const formUserName = <?php echo json_encode($form_user_name); ?>;

            function closeModal() { if (modalOverlay) modalOverlay.classList.remove('visible'); }

            if(closeModalBtn) { closeModalBtn.addEventListener('click', closeModal); } // Botão só fecha
            if(modalOverlay){ modalOverlay.addEventListener('click', function(event) { if (event.target === modalOverlay) { closeModal(); } }); }

            if (formStatus && modalTitle && modalMessage && modalContent) {
                let title = ''; let message = ''; let messageType = formStatus;
                modalContent.className = 'modal-content ' + messageType; modalTitle.className = 'modal-title ' + messageType;
                if (formStatus === 'success') { const userNameDecoded = formUserName ? decodeURIComponent(formUserName.replace(/\+/g, ' ')) : 'Guerreiro(a)'; title = 'Missão Cumprida!'; message = `Valeu, ${userNameDecoded}! Seu relatório foi enviado. Obrigado por colaborar!`; }
                else if (formStatus === 'error') { title = 'Alerta Vermelho!'; message = 'Oops! Houve um erro ao enviar seu relatório. Tente novamente ou avise um Admin.'; }
                else if (formStatus === 'invalid') { title = 'Dados Incompletos!'; message = 'Atenção! Faltam informações no seu relatório. Preencha todos os campos.'; }
                modalTitle.textContent = title; modalMessage.textContent = message; modalOverlay.classList.add('visible');
                 // Limpa URL se houver parâmetros status/name (após mostrar o modal)
                 if (window.history.replaceState && (formStatus)) {
                     setTimeout(() => {
                        const cleanUrl = window.location.protocol + "//" + window.location.host + window.location.pathname;
                        window.history.replaceState({ path: cleanUrl }, '', cleanUrl);
                     }, 500); // Pequeno delay
                 }
            }
            // --- Fim Lógica Modal ---

            initializeNotificationSystem(); // Inicializa notificações
            // Chat não é mais inicializado aqui
        });
    </script>

</body>
</html>
<?php
if (isset($conn)) { $conn = null; }
if (isset($pdo)) { $pdo = null; }
?>